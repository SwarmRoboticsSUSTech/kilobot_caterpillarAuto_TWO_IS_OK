
build/caterpillarAuto_TWO_IS_OK.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
       8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
       c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      18:	0c 94 3b 05 	jmp	0xa76	; 0xa76 <__vector_6>
      1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      2c:	0c 94 01 0b 	jmp	0x1602	; 0x1602 <__vector_11>
      30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      38:	0c 94 61 0a 	jmp	0x14c2	; 0x14c2 <__vector_14>
      3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      5c:	0c 94 23 0b 	jmp	0x1646	; 0x1646 <__vector_23>
      60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      68:	9e 05       	cpc	r25, r14
      6a:	1a 06       	cpc	r1, r26
      6c:	72 05       	cpc	r23, r2
      6e:	68 05       	cpc	r22, r8
      70:	6f 05       	cpc	r22, r15
      72:	fc 05       	cpc	r31, r12
      74:	f1 05       	cpc	r31, r1
      76:	7f 0c       	add	r7, r15
      78:	63 0b       	sbc	r22, r19
      7a:	63 0b       	sbc	r22, r19
      7c:	7c 0c       	add	r7, r12
      7e:	88 0c       	add	r8, r8
      80:	78 0c       	add	r7, r8
      82:	8f 0c       	add	r8, r15
      84:	8b 0c       	add	r8, r11
      86:	93 0c       	add	r9, r3
      88:	4c 0c       	add	r4, r12
      8a:	1e 0c       	add	r1, r14

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
    wdt_disable();
      9a:	88 e1       	ldi	r24, 0x18	; 24
      9c:	0f b6       	in	r0, 0x3f	; 63
      9e:	f8 94       	cli
      a0:	80 93 60 00 	sts	0x0060, r24
      a4:	10 92 60 00 	sts	0x0060, r1
      a8:	0f be       	out	0x3f, r0	; 63

000000aa <__do_copy_data>:
      aa:	11 e0       	ldi	r17, 0x01	; 1
      ac:	a0 e0       	ldi	r26, 0x00	; 0
      ae:	b1 e0       	ldi	r27, 0x01	; 1
      b0:	ea e8       	ldi	r30, 0x8A	; 138
      b2:	f0 e2       	ldi	r31, 0x20	; 32
      b4:	02 c0       	rjmp	.+4      	; 0xba <__do_copy_data+0x10>
      b6:	05 90       	lpm	r0, Z+
      b8:	0d 92       	st	X+, r0
      ba:	ae 31       	cpi	r26, 0x1E	; 30
      bc:	b1 07       	cpc	r27, r17
      be:	d9 f7       	brne	.-10     	; 0xb6 <__do_copy_data+0xc>

000000c0 <__do_clear_bss>:
      c0:	21 e0       	ldi	r18, 0x01	; 1
      c2:	ae e1       	ldi	r26, 0x1E	; 30
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
      c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
      ca:	a8 3b       	cpi	r26, 0xB8	; 184
      cc:	b2 07       	cpc	r27, r18
      ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
      d0:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <main>
      d4:	0c 94 43 10 	jmp	0x2086	; 0x2086 <_exit>

000000d8 <__bad_interrupt>:
      d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <setup>:

void setup()
{   
    //If the robot is the seed, its gradient should be 0: overwrite the 
    // previously set value of GRADIENT_MAX.
    if (kilo_uid == SEED_ID)
      dc:	80 91 b3 01 	lds	r24, 0x01B3
      e0:	90 91 b4 01 	lds	r25, 0x01B4
      e4:	89 2b       	or	r24, r25
      e6:	91 f5       	brne	.+100    	; 0x14c <setup+0x70>
    {   
        own_gradient = 0;
      e8:	10 92 11 01 	sts	0x0111, r1
      ec:	10 92 10 01 	sts	0x0110, r1
		distance_to_motivator = DISTANCE_MOVE;
      f0:	85 e3       	ldi	r24, 0x35	; 53
      f2:	90 e0       	ldi	r25, 0x00	; 0
      f4:	90 93 05 01 	sts	0x0105, r25
      f8:	80 93 04 01 	sts	0x0104, r24
		update_distance_to_motivator = UPDATE;
      fc:	81 e0       	ldi	r24, 0x01	; 1
      fe:	90 e0       	ldi	r25, 0x00	; 0
     100:	90 93 33 01 	sts	0x0133, r25
     104:	80 93 32 01 	sts	0x0132, r24
		update_state_motivator = UPDATE;
     108:	90 93 2f 01 	sts	0x012F, r25
     10c:	80 93 2e 01 	sts	0x012E, r24
		flag_minor = GRADIENT_MINOR_YES;
     110:	90 93 37 01 	sts	0x0137, r25
     114:	80 93 36 01 	sts	0x0136, r24
		state_motivator = COMPLETED;
     118:	85 e0       	ldi	r24, 0x05	; 5
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	90 93 29 01 	sts	0x0129, r25
     120:	80 93 28 01 	sts	0x0128, r24
     124:	90 e0       	ldi	r25, 0x00	; 0
    }   
        
    // Set the transmission message.
    message.type = NORMAL;
     126:	10 92 47 01 	sts	0x0147, r1
    message.data[0] = own_gradient;
     12a:	90 93 3e 01 	sts	0x013E, r25
	// Sequence has not been formed completely.
	message.data[1] = formed_state;
     12e:	90 91 1e 01 	lds	r25, 0x011E
     132:	90 93 3f 01 	sts	0x013F, r25
	message.data[2] = state_motivator;
     136:	80 93 40 01 	sts	0x0140, r24
	message.crc = message_crc(&message);
     13a:	8e e3       	ldi	r24, 0x3E	; 62
     13c:	91 e0       	ldi	r25, 0x01	; 1
     13e:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <message_crc>
     142:	90 93 49 01 	sts	0x0149, r25
     146:	80 93 48 01 	sts	0x0148, r24
     14a:	08 95       	ret
     14c:	90 91 10 01 	lds	r25, 0x0110
     150:	80 91 28 01 	lds	r24, 0x0128
     154:	e8 cf       	rjmp	.-48     	; 0x126 <setup+0x4a>

00000156 <message_tx>:
}


message_t *message_tx()
{
	message.data[0] = own_gradient;
     156:	80 91 10 01 	lds	r24, 0x0110
     15a:	80 93 3e 01 	sts	0x013E, r24
	message.data[1] = formed_state;
     15e:	80 91 1e 01 	lds	r24, 0x011E
     162:	80 93 3f 01 	sts	0x013F, r24
	message.data[2] = state_myself;
     166:	80 91 26 01 	lds	r24, 0x0126
     16a:	80 93 40 01 	sts	0x0140, r24
		default:
			 set_color(RGB(0, 1, 1));
			 break;
	}
	*/
	message.crc = message_crc(&message);
     16e:	8e e3       	ldi	r24, 0x3E	; 62
     170:	91 e0       	ldi	r25, 0x01	; 1
     172:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <message_crc>
     176:	90 93 49 01 	sts	0x0149, r25
     17a:	80 93 48 01 	sts	0x0148, r24
    return &message;
}
     17e:	8e e3       	ldi	r24, 0x3E	; 62
     180:	91 e0       	ldi	r25, 0x01	; 1
     182:	08 95       	ret

00000184 <message_rx>:

void message_rx(message_t *m, distance_measurement_t *d)
{
     184:	cf 93       	push	r28
     186:	df 93       	push	r29
     188:	ec 01       	movw	r28, r24
	//set_color(RGB(1, 0, 0));
    received_gradient = m->data[0];
     18a:	28 81       	ld	r18, Y
     18c:	30 e0       	ldi	r19, 0x00	; 0
     18e:	30 93 2d 01 	sts	0x012D, r19
     192:	20 93 2c 01 	sts	0x012C, r18
	// Assure that the received data is valid.
	if (received_gradient != own_gradient)  
     196:	40 91 10 01 	lds	r20, 0x0110
     19a:	50 91 11 01 	lds	r21, 0x0111
     19e:	24 17       	cp	r18, r20
     1a0:	35 07       	cpc	r19, r21
     1a2:	09 f4       	brne	.+2      	; 0x1a6 <message_rx+0x22>
     1a4:	9a c0       	rjmp	.+308    	; 0x2da <message_rx+0x156>
	{
    	distance = estimate_distance(d);
     1a6:	cb 01       	movw	r24, r22
     1a8:	0e 94 9a 07 	call	0xf34	; 0xf34 <estimate_distance>
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	90 93 07 01 	sts	0x0107, r25
     1b2:	80 93 06 01 	sts	0x0106, r24
		// Valid data in the valid distance.
		if (distance <= DISTANCE_GRADIENT)
     1b6:	87 34       	cpi	r24, 0x47	; 71
     1b8:	91 05       	cpc	r25, r1
     1ba:	0c f0       	brlt	.+2      	; 0x1be <message_rx+0x3a>
     1bc:	49 c0       	rjmp	.+146    	; 0x250 <message_rx+0xcc>
		{
			last_gradient_anchored = kilo_ticks;
     1be:	40 91 7d 01 	lds	r20, 0x017D
     1c2:	50 91 7e 01 	lds	r21, 0x017E
     1c6:	60 91 7f 01 	lds	r22, 0x017F
     1ca:	70 91 80 01 	lds	r23, 0x0180
     1ce:	40 93 4e 01 	sts	0x014E, r20
     1d2:	50 93 4f 01 	sts	0x014F, r21
     1d6:	60 93 50 01 	sts	0x0150, r22
     1da:	70 93 51 01 	sts	0x0151, r23
			// The message was sent by my motivated.
			// I found someone's gradient maxer than mine in the world.
			// My formed state is determined by my maxer.
			if (received_gradient > own_gradient)
     1de:	20 91 2c 01 	lds	r18, 0x012C
     1e2:	30 91 2d 01 	lds	r19, 0x012D
     1e6:	e0 91 10 01 	lds	r30, 0x0110
     1ea:	f0 91 11 01 	lds	r31, 0x0111
			{
				last_found_maxer = kilo_ticks;
     1ee:	40 91 7d 01 	lds	r20, 0x017D
     1f2:	50 91 7e 01 	lds	r21, 0x017E
     1f6:	60 91 7f 01 	lds	r22, 0x017F
     1fa:	70 91 80 01 	lds	r23, 0x0180
		{
			last_gradient_anchored = kilo_ticks;
			// The message was sent by my motivated.
			// I found someone's gradient maxer than mine in the world.
			// My formed state is determined by my maxer.
			if (received_gradient > own_gradient)
     1fe:	e2 17       	cp	r30, r18
     200:	f3 07       	cpc	r31, r19
     202:	0c f4       	brge	.+2      	; 0x206 <message_rx+0x82>
     204:	6d c0       	rjmp	.+218    	; 0x2e0 <message_rx+0x15c>
			}
			// The message was sent by my motivator.
			// (received_gradient < own_gradient)
			else
			{
				last_found_minor = kilo_ticks;
     206:	40 93 56 01 	sts	0x0156, r20
     20a:	50 93 57 01 	sts	0x0157, r21
     20e:	60 93 58 01 	sts	0x0158, r22
     212:	70 93 59 01 	sts	0x0159, r23
				own_gradient = received_gradient + 1;
     216:	2f 5f       	subi	r18, 0xFF	; 255
     218:	3f 4f       	sbci	r19, 0xFF	; 255
     21a:	30 93 11 01 	sts	0x0111, r19
     21e:	20 93 10 01 	sts	0x0110, r18
				state_motivator =  m->data[2];
     222:	2a 81       	ldd	r18, Y+2	; 0x02
     224:	30 e0       	ldi	r19, 0x00	; 0
     226:	30 93 29 01 	sts	0x0129, r19
     22a:	20 93 28 01 	sts	0x0128, r18
				update_state_motivator = UPDATE;
     22e:	41 e0       	ldi	r20, 0x01	; 1
     230:	50 e0       	ldi	r21, 0x00	; 0
     232:	50 93 2f 01 	sts	0x012F, r21
     236:	40 93 2e 01 	sts	0x012E, r20
				if (state_motivator != MOVE)
     23a:	24 30       	cpi	r18, 0x04	; 4
     23c:	31 05       	cpc	r19, r1
     23e:	41 f0       	breq	.+16     	; 0x250 <message_rx+0xcc>
				{
					distance_to_motivator = distance;
     240:	90 93 05 01 	sts	0x0105, r25
     244:	80 93 04 01 	sts	0x0104, r24
					update_distance_to_motivator = UPDATE;
     248:	50 93 33 01 	sts	0x0133, r21
     24c:	40 93 32 01 	sts	0x0132, r20
				}
			}
		}
		
		flag_maxest = GRADIENT_MAX_NO;
     250:	10 92 39 01 	sts	0x0139, r1
     254:	10 92 38 01 	sts	0x0138, r1
		
		// I have neighbours whose gradient is minor than mine.
		// Meanwhile long time no find gradient maxer than mine.
		// I am the maxest one in my local world.
		if((kilo_uid != SEED_ID) && (kilo_ticks > (last_found_maxer + TIME_CHECK_MAXER)))
     258:	80 91 b3 01 	lds	r24, 0x01B3
     25c:	90 91 b4 01 	lds	r25, 0x01B4
     260:	89 2b       	or	r24, r25
     262:	d9 f1       	breq	.+118    	; 0x2da <message_rx+0x156>
     264:	40 91 7d 01 	lds	r20, 0x017D
     268:	50 91 7e 01 	lds	r21, 0x017E
     26c:	60 91 7f 01 	lds	r22, 0x017F
     270:	70 91 80 01 	lds	r23, 0x0180
     274:	80 91 52 01 	lds	r24, 0x0152
     278:	90 91 53 01 	lds	r25, 0x0153
     27c:	a0 91 54 01 	lds	r26, 0x0154
     280:	b0 91 55 01 	lds	r27, 0x0155
     284:	80 56       	subi	r24, 0x60	; 96
     286:	9f 4f       	sbci	r25, 0xFF	; 255
     288:	af 4f       	sbci	r26, 0xFF	; 255
     28a:	bf 4f       	sbci	r27, 0xFF	; 255
     28c:	84 17       	cp	r24, r20
     28e:	95 07       	cpc	r25, r21
     290:	a6 07       	cpc	r26, r22
     292:	b7 07       	cpc	r27, r23
     294:	10 f5       	brcc	.+68     	; 0x2da <message_rx+0x156>
		{
			formed_state = FORMED_OK;
     296:	81 e0       	ldi	r24, 0x01	; 1
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	90 93 1f 01 	sts	0x011F, r25
     29e:	80 93 1e 01 	sts	0x011E, r24
			distance_to_motivated = DISTANCE_MAX;
     2a2:	24 e6       	ldi	r18, 0x64	; 100
     2a4:	30 e0       	ldi	r19, 0x00	; 0
     2a6:	30 93 03 01 	sts	0x0103, r19
     2aa:	20 93 02 01 	sts	0x0102, r18
			distance_to_motivated_parent = distance_to_motivated;
     2ae:	30 93 01 01 	sts	0x0101, r19
     2b2:	20 93 00 01 	sts	0x0100, r18
			update_distance_to_motivated = UPDATE;
     2b6:	90 93 35 01 	sts	0x0135, r25
     2ba:	80 93 34 01 	sts	0x0134, r24
			state_motivated = COMPLETED;
     2be:	25 e0       	ldi	r18, 0x05	; 5
     2c0:	30 e0       	ldi	r19, 0x00	; 0
     2c2:	30 93 2b 01 	sts	0x012B, r19
     2c6:	20 93 2a 01 	sts	0x012A, r18
			update_state_motivated = UPDATE;
     2ca:	90 93 31 01 	sts	0x0131, r25
     2ce:	80 93 30 01 	sts	0x0130, r24
			flag_maxest = GRADIENT_MAX_YES;
     2d2:	90 93 39 01 	sts	0x0139, r25
     2d6:	80 93 38 01 	sts	0x0138, r24
			update_state_motivator = UPDATE;
			set_color(RGB(1, 0, 1));
		}
		*/
	}	
}
     2da:	df 91       	pop	r29
     2dc:	cf 91       	pop	r28
     2de:	08 95       	ret
			// The message was sent by my motivated.
			// I found someone's gradient maxer than mine in the world.
			// My formed state is determined by my maxer.
			if (received_gradient > own_gradient)
			{
				last_found_maxer = kilo_ticks;
     2e0:	40 93 52 01 	sts	0x0152, r20
     2e4:	50 93 53 01 	sts	0x0153, r21
     2e8:	60 93 54 01 	sts	0x0154, r22
     2ec:	70 93 55 01 	sts	0x0155, r23
				if (received_gradient == (own_gradient + 1))
     2f0:	31 96       	adiw	r30, 0x01	; 1
     2f2:	2e 17       	cp	r18, r30
     2f4:	3f 07       	cpc	r19, r31
     2f6:	09 f0       	breq	.+2      	; 0x2fa <message_rx+0x176>
     2f8:	ab cf       	rjmp	.-170    	; 0x250 <message_rx+0xcc>
				{
					formed_state = m->data[1];
     2fa:	29 81       	ldd	r18, Y+1	; 0x01
     2fc:	30 e0       	ldi	r19, 0x00	; 0
     2fe:	30 93 1f 01 	sts	0x011F, r19
     302:	20 93 1e 01 	sts	0x011E, r18
					state_motivated =  m->data[2];
     306:	2a 81       	ldd	r18, Y+2	; 0x02
     308:	30 e0       	ldi	r19, 0x00	; 0
     30a:	30 93 2b 01 	sts	0x012B, r19
     30e:	20 93 2a 01 	sts	0x012A, r18
					default:
						set_color(RGB(0, 1, 1));
						break;
					}
					*/
					update_state_motivated = UPDATE;
     312:	41 e0       	ldi	r20, 0x01	; 1
     314:	50 e0       	ldi	r21, 0x00	; 0
     316:	50 93 31 01 	sts	0x0131, r21
     31a:	40 93 30 01 	sts	0x0130, r20
					if (state_motivated != MOVE) {
     31e:	24 30       	cpi	r18, 0x04	; 4
     320:	31 05       	cpc	r19, r1
     322:	c9 f0       	breq	.+50     	; 0x356 <message_rx+0x1d2>
						if ((num_stop ++) == 1) 
     324:	20 91 22 01 	lds	r18, 0x0122
     328:	30 91 23 01 	lds	r19, 0x0123
     32c:	a9 01       	movw	r20, r18
     32e:	4f 5f       	subi	r20, 0xFF	; 255
     330:	5f 4f       	sbci	r21, 0xFF	; 255
     332:	50 93 23 01 	sts	0x0123, r21
     336:	40 93 22 01 	sts	0x0122, r20
     33a:	21 30       	cpi	r18, 0x01	; 1
     33c:	31 05       	cpc	r19, r1
     33e:	81 f0       	breq	.+32     	; 0x360 <message_rx+0x1dc>
						{
							my_fault = NO;
						}
						distance_to_motivated = distance;
     340:	90 93 03 01 	sts	0x0103, r25
     344:	80 93 02 01 	sts	0x0102, r24
						update_distance_to_motivated = UPDATE;
     348:	81 e0       	ldi	r24, 0x01	; 1
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	90 93 35 01 	sts	0x0135, r25
     350:	80 93 34 01 	sts	0x0134, r24
     354:	7d cf       	rjmp	.-262    	; 0x250 <message_rx+0xcc>
					}
					else
					{
						num_stop = 0;
     356:	10 92 23 01 	sts	0x0123, r1
     35a:	10 92 22 01 	sts	0x0122, r1
     35e:	78 cf       	rjmp	.-272    	; 0x250 <message_rx+0xcc>
					*/
					update_state_motivated = UPDATE;
					if (state_motivated != MOVE) {
						if ((num_stop ++) == 1) 
						{
							my_fault = NO;
     360:	10 92 0b 01 	sts	0x010B, r1
     364:	10 92 0a 01 	sts	0x010A, r1
     368:	eb cf       	rjmp	.-42     	; 0x340 <message_rx+0x1bc>

0000036a <set_motion.part.1>:
            spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
        }
        else if (current_motion == LEFT)
        {   
            spinup_motors();
     36a:	0e 94 b7 06 	call	0xd6e	; 0xd6e <spinup_motors>
            set_motors(kilo_turn_left, 0);
     36e:	60 e0       	ldi	r22, 0x00	; 0
     370:	80 91 b7 01 	lds	r24, 0x01B7
     374:	0c 94 b2 06 	jmp	0xd64	; 0xd64 <set_motors>

00000378 <randBinary>:


// Generate 0 or 1 randomly
int randBinary(){
    // Generate an 8-bit random number (between 0 and 2^8 - 1 = 255).
    int random_number = rand_hard();
     378:	0e 94 12 07 	call	0xe24	; 0xe24 <rand_hard>
    // Compute the remainder of random_number when divided by 2.
    // This gives a new random number in the set {0, 1}.
    int random_direction = (random_number % 2);

    return random_direction;
}
     37c:	81 70       	andi	r24, 0x01	; 1
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	08 95       	ret

00000382 <rand>:

// Generate a random number in the closed interval (0, 1).
float rand(){
    // Generate an 8-bit random number (between 0 and 2^8 - 1 = 255).
    int random_number = rand_hard();
     382:	0e 94 12 07 	call	0xe24	; 0xe24 <rand_hard>
     386:	90 e0       	ldi	r25, 0x00	; 0

    float result = random_number / 255;
     388:	6f ef       	ldi	r22, 0xFF	; 255
     38a:	70 e0       	ldi	r23, 0x00	; 0
     38c:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <__divmodhi4>
     390:	88 27       	eor	r24, r24
     392:	77 fd       	sbrc	r23, 7
     394:	80 95       	com	r24
     396:	98 2f       	mov	r25, r24
     398:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <__floatsisf>

    return result;
}
     39c:	08 95       	ret

0000039e <set_led>:

// Function to set led states
void set_led()
{
    // Set the LED color based on the gradient.
    switch (own_gradient) {
     39e:	80 91 10 01 	lds	r24, 0x0110
     3a2:	90 91 11 01 	lds	r25, 0x0111
     3a6:	82 30       	cpi	r24, 0x02	; 2
     3a8:	91 05       	cpc	r25, r1
     3aa:	c9 f0       	breq	.+50     	; 0x3de <set_led+0x40>
     3ac:	3c f4       	brge	.+14     	; 0x3bc <set_led+0x1e>
     3ae:	00 97       	sbiw	r24, 0x00	; 0
     3b0:	99 f0       	breq	.+38     	; 0x3d8 <set_led+0x3a>
     3b2:	01 97       	sbiw	r24, 0x01	; 1
     3b4:	59 f4       	brne	.+22     	; 0x3cc <set_led+0x2e>
        case 0:
            set_color(RGB(1, 1, 1)); // White
            break;
        case 1:
            set_color(RGB(1, 0, 0)); // Red
     3b6:	81 e0       	ldi	r24, 0x01	; 1
     3b8:	0c 94 dd 0a 	jmp	0x15ba	; 0x15ba <set_color>

// Function to set led states
void set_led()
{
    // Set the LED color based on the gradient.
    switch (own_gradient) {
     3bc:	83 30       	cpi	r24, 0x03	; 3
     3be:	91 05       	cpc	r25, r1
     3c0:	41 f0       	breq	.+16     	; 0x3d2 <set_led+0x34>
     3c2:	04 97       	sbiw	r24, 0x04	; 4
     3c4:	19 f4       	brne	.+6      	; 0x3cc <set_led+0x2e>
            break;
        case 3:
            set_color(RGB(0, 0, 1)); // Blue
            break;
        case 4:
            set_color(RGB(1, 1, 0)); // Yellow
     3c6:	85 e0       	ldi	r24, 0x05	; 5
     3c8:	0c 94 dd 0a 	jmp	0x15ba	; 0x15ba <set_color>
            break;
        default:
            set_color(RGB(1, 0, 1)); // Magneta
     3cc:	81 e1       	ldi	r24, 0x11	; 17
     3ce:	0c 94 dd 0a 	jmp	0x15ba	; 0x15ba <set_color>
            break;
        case 2:
            set_color(RGB(0, 1, 0)); // Green
            break;
        case 3:
            set_color(RGB(0, 0, 1)); // Blue
     3d2:	80 e1       	ldi	r24, 0x10	; 16
     3d4:	0c 94 dd 0a 	jmp	0x15ba	; 0x15ba <set_color>
void set_led()
{
    // Set the LED color based on the gradient.
    switch (own_gradient) {
        case 0:
            set_color(RGB(1, 1, 1)); // White
     3d8:	85 e1       	ldi	r24, 0x15	; 21
     3da:	0c 94 dd 0a 	jmp	0x15ba	; 0x15ba <set_color>
            break;
        case 1:
            set_color(RGB(1, 0, 0)); // Red
            break;
        case 2:
            set_color(RGB(0, 1, 0)); // Green
     3de:	84 e0       	ldi	r24, 0x04	; 4
     3e0:	0c 94 dd 0a 	jmp	0x15ba	; 0x15ba <set_color>

000003e4 <set_motion>:

// Function to handle motion.
void set_motion(int new_motion)
{   
    // Only take an an action if the motion is being changed.
    if (current_motion != new_motion)
     3e4:	20 91 0e 01 	lds	r18, 0x010E
     3e8:	30 91 0f 01 	lds	r19, 0x010F
     3ec:	28 17       	cp	r18, r24
     3ee:	39 07       	cpc	r19, r25
     3f0:	71 f0       	breq	.+28     	; 0x40e <set_motion+0x2a>
    {   
        current_motion = new_motion;
     3f2:	90 93 0f 01 	sts	0x010F, r25
     3f6:	80 93 0e 01 	sts	0x010E, r24
        
        if (current_motion == STOP)
     3fa:	00 97       	sbiw	r24, 0x00	; 0
     3fc:	81 f0       	breq	.+32     	; 0x41e <set_motion+0x3a>
        {   
            set_motors(0, 0);
        }
        else if (current_motion == FORWARD)
     3fe:	81 30       	cpi	r24, 0x01	; 1
     400:	91 05       	cpc	r25, r1
     402:	89 f0       	breq	.+34     	; 0x426 <set_motion+0x42>
        {   
            spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
        }
        else if (current_motion == LEFT)
     404:	82 30       	cpi	r24, 0x02	; 2
     406:	91 05       	cpc	r25, r1
     408:	b1 f0       	breq	.+44     	; 0x436 <set_motion+0x52>
        {   
            spinup_motors();
            set_motors(kilo_turn_left, 0);
        }
        else if (current_motion == RIGHT)
     40a:	03 97       	sbiw	r24, 0x03	; 3
     40c:	09 f0       	breq	.+2      	; 0x410 <set_motion+0x2c>
     40e:	08 95       	ret
        {   
            spinup_motors();
     410:	0e 94 b7 06 	call	0xd6e	; 0xd6e <spinup_motors>
            set_motors(0, kilo_turn_right);
     414:	60 91 a3 01 	lds	r22, 0x01A3
     418:	80 e0       	ldi	r24, 0x00	; 0
     41a:	0c 94 b2 06 	jmp	0xd64	; 0xd64 <set_motors>
    {   
        current_motion = new_motion;
        
        if (current_motion == STOP)
        {   
            set_motors(0, 0);
     41e:	60 e0       	ldi	r22, 0x00	; 0
     420:	80 e0       	ldi	r24, 0x00	; 0
     422:	0c 94 b2 06 	jmp	0xd64	; 0xd64 <set_motors>
        }
        else if (current_motion == FORWARD)
        {   
            spinup_motors();
     426:	0e 94 b7 06 	call	0xd6e	; 0xd6e <spinup_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
     42a:	60 91 b6 01 	lds	r22, 0x01B6
     42e:	80 91 b5 01 	lds	r24, 0x01B5
     432:	0c 94 b2 06 	jmp	0xd64	; 0xd64 <set_motors>
        }
        else if (current_motion == LEFT)
        {   
            spinup_motors();
     436:	0e 94 b7 06 	call	0xd6e	; 0xd6e <spinup_motors>
            set_motors(kilo_turn_left, 0);
     43a:	60 e0       	ldi	r22, 0x00	; 0
     43c:	80 91 b7 01 	lds	r24, 0x01B7
     440:	0c 94 b2 06 	jmp	0xd64	; 0xd64 <set_motors>

00000444 <check_own_gradient>:
}

void check_own_gradient() {
	// If no neighbors detected within IME_LAST_GRADIENT seconds
	// then sleep waiting for be activated.
    if ( (kilo_uid != SEED_ID) && (kilo_ticks > (last_gradient_anchored + TIME_LAST_GRADIENT)) && (own_gradient < GRADIENT_MAX))
     444:	80 91 b3 01 	lds	r24, 0x01B3
     448:	90 91 b4 01 	lds	r25, 0x01B4
     44c:	89 2b       	or	r24, r25
     44e:	51 f1       	breq	.+84     	; 0x4a4 <check_own_gradient+0x60>
     450:	40 91 7d 01 	lds	r20, 0x017D
     454:	50 91 7e 01 	lds	r21, 0x017E
     458:	60 91 7f 01 	lds	r22, 0x017F
     45c:	70 91 80 01 	lds	r23, 0x0180
     460:	80 91 4e 01 	lds	r24, 0x014E
     464:	90 91 4f 01 	lds	r25, 0x014F
     468:	a0 91 50 01 	lds	r26, 0x0150
     46c:	b0 91 51 01 	lds	r27, 0x0151
     470:	80 56       	subi	r24, 0x60	; 96
     472:	9f 4f       	sbci	r25, 0xFF	; 255
     474:	af 4f       	sbci	r26, 0xFF	; 255
     476:	bf 4f       	sbci	r27, 0xFF	; 255
     478:	84 17       	cp	r24, r20
     47a:	95 07       	cpc	r25, r21
     47c:	a6 07       	cpc	r26, r22
     47e:	b7 07       	cpc	r27, r23
     480:	88 f4       	brcc	.+34     	; 0x4a4 <check_own_gradient+0x60>
     482:	80 91 10 01 	lds	r24, 0x0110
     486:	90 91 11 01 	lds	r25, 0x0111
     48a:	8f 3f       	cpi	r24, 0xFF	; 255
     48c:	91 05       	cpc	r25, r1
     48e:	54 f4       	brge	.+20     	; 0x4a4 <check_own_gradient+0x60>
    {   
        own_gradient = GRADIENT_MAX;
     490:	8f ef       	ldi	r24, 0xFF	; 255
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	90 93 11 01 	sts	0x0111, r25
     498:	80 93 10 01 	sts	0x0110, r24
		formed_state = FORMED_NO;
     49c:	10 92 1f 01 	sts	0x011F, r1
     4a0:	10 92 1e 01 	sts	0x011E, r1
     4a4:	08 95       	ret

000004a6 <move>:
    }  
}


void move() {
     4a6:	cf 93       	push	r28
     4a8:	df 93       	push	r29
	int next_motion = offspring;
     4aa:	c0 91 08 01 	lds	r28, 0x0108
     4ae:	d0 91 09 01 	lds	r29, 0x0109
	 set_color(RGB(0, 0, 0));
     4b2:	80 e0       	ldi	r24, 0x00	; 0
     4b4:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <set_color>
	// closer and closer
	if (distance_to_motivated < distance_to_motivated_parent) 
     4b8:	20 91 02 01 	lds	r18, 0x0102
     4bc:	30 91 03 01 	lds	r19, 0x0103
     4c0:	80 91 00 01 	lds	r24, 0x0100
     4c4:	90 91 01 01 	lds	r25, 0x0101
     4c8:	28 17       	cp	r18, r24
     4ca:	39 07       	cpc	r19, r25
     4cc:	0c f4       	brge	.+2      	; 0x4d0 <move+0x2a>
     4ce:	83 c0       	rjmp	.+262    	; 0x5d6 <move+0x130>
		//num_retain = NUM_RETAIN + 1; 
		next_motion = offspring;
	}
	// farer and farer
	// If the distance_to_motivated keep unchanged, it is unusual.
	else if (distance_to_motivated > distance_to_motivated_parent)
     4d0:	82 17       	cp	r24, r18
     4d2:	93 07       	cpc	r25, r19
     4d4:	0c f4       	brge	.+2      	; 0x4d8 <move+0x32>
     4d6:	53 c0       	rjmp	.+166    	; 0x57e <move+0xd8>
			}
		}
	}
	else
	{
		if (flag_maxest == GRADIENT_MAX_YES)
     4d8:	80 91 38 01 	lds	r24, 0x0138
     4dc:	90 91 39 01 	lds	r25, 0x0139
     4e0:	01 97       	sbiw	r24, 0x01	; 1
     4e2:	19 f1       	breq	.+70     	; 0x52a <move+0x84>
			//num_retain = 0;
			next_motion = FORWARD;
		}
		else
		{
			set_color(RGB(0, 0, 1));
     4e4:	80 e1       	ldi	r24, 0x10	; 16
     4e6:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <set_color>
			if ((last_second_logic != LOGIC_FARER) && (last_first_logic == LOGIC_CLOSER))
     4ea:	80 91 12 01 	lds	r24, 0x0112
     4ee:	90 91 13 01 	lds	r25, 0x0113
     4f2:	02 97       	sbiw	r24, 0x02	; 2
     4f4:	09 f4       	brne	.+2      	; 0x4f8 <move+0x52>
     4f6:	ac c0       	rjmp	.+344    	; 0x650 <move+0x1aa>
     4f8:	80 91 14 01 	lds	r24, 0x0114
     4fc:	90 91 15 01 	lds	r25, 0x0115
     500:	00 97       	sbiw	r24, 0x00	; 0
     502:	09 f0       	breq	.+2      	; 0x506 <move+0x60>
     504:	7c c0       	rjmp	.+248    	; 0x5fe <move+0x158>
			{
				// Update.
				//num_retain = NUM_RETAIN;
	        	switch (offspring)
     506:	80 91 08 01 	lds	r24, 0x0108
     50a:	90 91 09 01 	lds	r25, 0x0109
     50e:	82 30       	cpi	r24, 0x02	; 2
     510:	91 05       	cpc	r25, r1
     512:	09 f4       	brne	.+2      	; 0x516 <move+0x70>
     514:	c6 c0       	rjmp	.+396    	; 0x6a2 <move+0x1fc>
     516:	83 30       	cpi	r24, 0x03	; 3
     518:	91 05       	cpc	r25, r1
     51a:	09 f4       	brne	.+2      	; 0x51e <move+0x78>
     51c:	bd c0       	rjmp	.+378    	; 0x698 <move+0x1f2>
     51e:	01 97       	sbiw	r24, 0x01	; 1
     520:	09 f4       	brne	.+2      	; 0x524 <move+0x7e>
     522:	af c0       	rjmp	.+350    	; 0x682 <move+0x1dc>
     524:	20 e0       	ldi	r18, 0x00	; 0
     526:	80 e0       	ldi	r24, 0x00	; 0
     528:	70 c0       	rjmp	.+224    	; 0x60a <move+0x164>
	else
	{
		if (flag_maxest == GRADIENT_MAX_YES)
		{
			//num_retain = 0;
			next_motion = FORWARD;
     52a:	c1 e0       	ldi	r28, 0x01	; 1
     52c:	d0 e0       	ldi	r29, 0x00	; 0
			last_first_logic = LOGIC_EQUAL;
		}
	}
	
		
	offspring = next_motion;
     52e:	d0 93 09 01 	sts	0x0109, r29
     532:	c0 93 08 01 	sts	0x0108, r28

// Function to handle motion.
void set_motion(int new_motion)
{   
    // Only take an an action if the motion is being changed.
    if (current_motion != new_motion)
     536:	80 91 0e 01 	lds	r24, 0x010E
     53a:	90 91 0f 01 	lds	r25, 0x010F
     53e:	c8 17       	cp	r28, r24
     540:	d9 07       	cpc	r29, r25
     542:	91 f0       	breq	.+36     	; 0x568 <move+0xc2>
    {   
        current_motion = new_motion;
     544:	d0 93 0f 01 	sts	0x010F, r29
     548:	c0 93 0e 01 	sts	0x010E, r28
        
        if (current_motion == STOP)
     54c:	20 97       	sbiw	r28, 0x00	; 0
     54e:	09 f4       	brne	.+2      	; 0x552 <move+0xac>
     550:	72 c0       	rjmp	.+228    	; 0x636 <move+0x190>
        {   
            set_motors(0, 0);
        }
        else if (current_motion == FORWARD)
     552:	c1 30       	cpi	r28, 0x01	; 1
     554:	d1 05       	cpc	r29, r1
     556:	09 f4       	brne	.+2      	; 0x55a <move+0xb4>
     558:	83 c0       	rjmp	.+262    	; 0x660 <move+0x1ba>
        {   
            spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
        }
        else if (current_motion == LEFT)
     55a:	c2 30       	cpi	r28, 0x02	; 2
     55c:	d1 05       	cpc	r29, r1
     55e:	09 f4       	brne	.+2      	; 0x562 <move+0xbc>
     560:	88 c0       	rjmp	.+272    	; 0x672 <move+0x1cc>
        {   
            spinup_motors();
            set_motors(kilo_turn_left, 0);
        }
        else if (current_motion == RIGHT)
     562:	23 97       	sbiw	r28, 0x03	; 3
     564:	09 f4       	brne	.+2      	; 0x568 <move+0xc2>
     566:	6c c0       	rjmp	.+216    	; 0x640 <move+0x19a>
	}
	
		
	offspring = next_motion;
	set_motion(offspring);
	distance_to_motivated_parent = distance_to_motivated;
     568:	80 91 02 01 	lds	r24, 0x0102
     56c:	90 91 03 01 	lds	r25, 0x0103
     570:	90 93 01 01 	sts	0x0101, r25
     574:	80 93 00 01 	sts	0x0100, r24

}
     578:	df 91       	pop	r29
     57a:	cf 91       	pop	r28
     57c:	08 95       	ret
	}
	// farer and farer
	// If the distance_to_motivated keep unchanged, it is unusual.
	else if (distance_to_motivated > distance_to_motivated_parent)
	{
		set_color(RGB(0, 1, 0));
     57e:	84 e0       	ldi	r24, 0x04	; 4
     580:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <set_color>
		last_second_logic = last_first_logic;
     584:	80 91 14 01 	lds	r24, 0x0114
     588:	90 91 15 01 	lds	r25, 0x0115
     58c:	90 93 13 01 	sts	0x0113, r25
     590:	80 93 12 01 	sts	0x0112, r24
		last_first_logic = LOGIC_FARER;
     594:	82 e0       	ldi	r24, 0x02	; 2
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	90 93 15 01 	sts	0x0115, r25
     59c:	80 93 14 01 	sts	0x0114, r24
		//num_retain = NUM_RETAIN;
		// It's not my fault, so I continue my movement as before.
		if (my_fault == NO)
     5a0:	80 91 0a 01 	lds	r24, 0x010A
     5a4:	90 91 0b 01 	lds	r25, 0x010B
     5a8:	89 2b       	or	r24, r25
     5aa:	d1 f1       	breq	.+116    	; 0x620 <move+0x17a>
			my_fault = YES;
			next_motion = offspring;
		}
		else
		{
			switch (offspring)
     5ac:	80 91 08 01 	lds	r24, 0x0108
     5b0:	90 91 09 01 	lds	r25, 0x0109
     5b4:	82 30       	cpi	r24, 0x02	; 2
     5b6:	91 05       	cpc	r25, r1
     5b8:	09 f4       	brne	.+2      	; 0x5bc <move+0x116>
     5ba:	4f c0       	rjmp	.+158    	; 0x65a <move+0x1b4>
     5bc:	83 30       	cpi	r24, 0x03	; 3
     5be:	91 05       	cpc	r25, r1
     5c0:	39 f0       	breq	.+14     	; 0x5d0 <move+0x12a>
     5c2:	01 97       	sbiw	r24, 0x01	; 1
     5c4:	09 f0       	breq	.+2      	; 0x5c8 <move+0x122>
     5c6:	b3 cf       	rjmp	.-154    	; 0x52e <move+0x88>


// Generate 0 or 1 randomly
int randBinary(){
    // Generate an 8-bit random number (between 0 and 2^8 - 1 = 255).
    int random_number = rand_hard();
     5c8:	0e 94 12 07 	call	0xe24	; 0xe24 <rand_hard>
					break;
				case RIGHT:
					next_motion = LEFT;
					break;
				case FORWARD:
					if (randBinary() == 1) 
     5cc:	80 ff       	sbrs	r24, 0
     5ce:	45 c0       	rjmp	.+138    	; 0x65a <move+0x1b4>
					{
						next_motion = LEFT;
     5d0:	c2 e0       	ldi	r28, 0x02	; 2
     5d2:	d0 e0       	ldi	r29, 0x00	; 0
     5d4:	ac cf       	rjmp	.-168    	; 0x52e <move+0x88>
	int next_motion = offspring;
	 set_color(RGB(0, 0, 0));
	// closer and closer
	if (distance_to_motivated < distance_to_motivated_parent) 
	{
		set_color(RGB(1, 0, 0));
     5d6:	81 e0       	ldi	r24, 0x01	; 1
     5d8:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <set_color>
		last_second_logic = last_first_logic;
     5dc:	80 91 14 01 	lds	r24, 0x0114
     5e0:	90 91 15 01 	lds	r25, 0x0115
     5e4:	90 93 13 01 	sts	0x0113, r25
     5e8:	80 93 12 01 	sts	0x0112, r24
		last_first_logic = LOGIC_CLOSER;
     5ec:	10 92 15 01 	sts	0x0115, r1
     5f0:	10 92 14 01 	sts	0x0114, r1
		//num_retain = NUM_RETAIN + 1; 
		next_motion = offspring;
     5f4:	c0 91 08 01 	lds	r28, 0x0108
     5f8:	d0 91 09 01 	lds	r29, 0x0109
     5fc:	98 cf       	rjmp	.-208    	; 0x52e <move+0x88>
     5fe:	28 2f       	mov	r18, r24
     600:	89 2f       	mov	r24, r25
						break;
        		}
			}
			else
			{
				next_motion = offspring;
     602:	c0 91 08 01 	lds	r28, 0x0108
     606:	d0 91 09 01 	lds	r29, 0x0109
			}
			// Update.
			last_second_logic = last_first_logic;
     60a:	20 93 12 01 	sts	0x0112, r18
     60e:	80 93 13 01 	sts	0x0113, r24
			last_first_logic = LOGIC_EQUAL;
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	90 93 15 01 	sts	0x0115, r25
     61a:	80 93 14 01 	sts	0x0114, r24
     61e:	87 cf       	rjmp	.-242    	; 0x52e <move+0x88>
		last_first_logic = LOGIC_FARER;
		//num_retain = NUM_RETAIN;
		// It's not my fault, so I continue my movement as before.
		if (my_fault == NO)
		{
			my_fault = YES;
     620:	81 e0       	ldi	r24, 0x01	; 1
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	90 93 0b 01 	sts	0x010B, r25
     628:	80 93 0a 01 	sts	0x010A, r24
			next_motion = offspring;
     62c:	c0 91 08 01 	lds	r28, 0x0108
     630:	d0 91 09 01 	lds	r29, 0x0109
     634:	7c cf       	rjmp	.-264    	; 0x52e <move+0x88>
    {   
        current_motion = new_motion;
        
        if (current_motion == STOP)
        {   
            set_motors(0, 0);
     636:	60 e0       	ldi	r22, 0x00	; 0
     638:	80 e0       	ldi	r24, 0x00	; 0
     63a:	0e 94 b2 06 	call	0xd64	; 0xd64 <set_motors>
     63e:	94 cf       	rjmp	.-216    	; 0x568 <move+0xc2>
            spinup_motors();
            set_motors(kilo_turn_left, 0);
        }
        else if (current_motion == RIGHT)
        {   
            spinup_motors();
     640:	0e 94 b7 06 	call	0xd6e	; 0xd6e <spinup_motors>
            set_motors(0, kilo_turn_right);
     644:	60 91 a3 01 	lds	r22, 0x01A3
     648:	80 e0       	ldi	r24, 0x00	; 0
     64a:	0e 94 b2 06 	call	0xd64	; 0xd64 <set_motors>
     64e:	8c cf       	rjmp	.-232    	; 0x568 <move+0xc2>
     650:	20 91 14 01 	lds	r18, 0x0114
     654:	80 91 15 01 	lds	r24, 0x0115
     658:	d4 cf       	rjmp	.-88     	; 0x602 <move+0x15c>
					{
						next_motion = LEFT;
					} 
					else 
					{
						next_motion = RIGHT;
     65a:	c3 e0       	ldi	r28, 0x03	; 3
     65c:	d0 e0       	ldi	r29, 0x00	; 0
     65e:	67 cf       	rjmp	.-306    	; 0x52e <move+0x88>
        {   
            set_motors(0, 0);
        }
        else if (current_motion == FORWARD)
        {   
            spinup_motors();
     660:	0e 94 b7 06 	call	0xd6e	; 0xd6e <spinup_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
     664:	60 91 b6 01 	lds	r22, 0x01B6
     668:	80 91 b5 01 	lds	r24, 0x01B5
     66c:	0e 94 b2 06 	call	0xd64	; 0xd64 <set_motors>
     670:	7b cf       	rjmp	.-266    	; 0x568 <move+0xc2>
        }
        else if (current_motion == LEFT)
        {   
            spinup_motors();
     672:	0e 94 b7 06 	call	0xd6e	; 0xd6e <spinup_motors>
            set_motors(kilo_turn_left, 0);
     676:	60 e0       	ldi	r22, 0x00	; 0
     678:	80 91 b7 01 	lds	r24, 0x01B7
     67c:	0e 94 b2 06 	call	0xd64	; 0xd64 <set_motors>
     680:	73 cf       	rjmp	.-282    	; 0x568 <move+0xc2>


// Generate 0 or 1 randomly
int randBinary(){
    // Generate an 8-bit random number (between 0 and 2^8 - 1 = 255).
    int random_number = rand_hard();
     682:	0e 94 12 07 	call	0xe24	; 0xe24 <rand_hard>
     686:	20 91 14 01 	lds	r18, 0x0114
        	        	break;
		            case RIGHT:
	    	           	next_motion = LEFT;
        	        	break;
            		case FORWARD:
                		if (randBinary() == 1) 
     68a:	80 fd       	sbrc	r24, 0
     68c:	0f c0       	rjmp	.+30     	; 0x6ac <move+0x206>
     68e:	80 91 15 01 	lds	r24, 0x0115
						{
                    		next_motion = LEFT;
                		} else 
						{
               	    		next_motion = RIGHT;
     692:	c3 e0       	ldi	r28, 0x03	; 3
     694:	d0 e0       	ldi	r29, 0x00	; 0
     696:	b9 cf       	rjmp	.-142    	; 0x60a <move+0x164>
					case LEFT:
            		   	next_motion = RIGHT;
        	        	break;
		            case RIGHT:
	    	           	next_motion = LEFT;
        	        	break;
     698:	20 e0       	ldi	r18, 0x00	; 0
     69a:	80 e0       	ldi	r24, 0x00	; 0
				{
					case LEFT:
            		   	next_motion = RIGHT;
        	        	break;
		            case RIGHT:
	    	           	next_motion = LEFT;
     69c:	c2 e0       	ldi	r28, 0x02	; 2
     69e:	d0 e0       	ldi	r29, 0x00	; 0
        	        	break;
     6a0:	b4 cf       	rjmp	.-152    	; 0x60a <move+0x164>
			set_color(RGB(0, 0, 1));
			if ((last_second_logic != LOGIC_FARER) && (last_first_logic == LOGIC_CLOSER))
			{
				// Update.
				//num_retain = NUM_RETAIN;
	        	switch (offspring)
     6a2:	20 e0       	ldi	r18, 0x00	; 0
     6a4:	80 e0       	ldi	r24, 0x00	; 0
				{
					case LEFT:
            		   	next_motion = RIGHT;
     6a6:	c3 e0       	ldi	r28, 0x03	; 3
     6a8:	d0 e0       	ldi	r29, 0x00	; 0
     6aa:	af cf       	rjmp	.-162    	; 0x60a <move+0x164>
     6ac:	80 91 15 01 	lds	r24, 0x0115
	    	           	next_motion = LEFT;
        	        	break;
            		case FORWARD:
                		if (randBinary() == 1) 
						{
                    		next_motion = LEFT;
     6b0:	c2 e0       	ldi	r28, 0x02	; 2
     6b2:	d0 e0       	ldi	r29, 0x00	; 0
     6b4:	aa cf       	rjmp	.-172    	; 0x60a <move+0x164>

000006b6 <loop>:
	set_motion(offspring);
	distance_to_motivated_parent = distance_to_motivated;

}

void loop() {
     6b6:	cf 92       	push	r12
     6b8:	df 92       	push	r13
     6ba:	ef 92       	push	r14
     6bc:	ff 92       	push	r15
}

void check_own_gradient() {
	// If no neighbors detected within IME_LAST_GRADIENT seconds
	// then sleep waiting for be activated.
    if ( (kilo_uid != SEED_ID) && (kilo_ticks > (last_gradient_anchored + TIME_LAST_GRADIENT)) && (own_gradient < GRADIENT_MAX))
     6be:	80 91 b3 01 	lds	r24, 0x01B3
     6c2:	90 91 b4 01 	lds	r25, 0x01B4
     6c6:	89 2b       	or	r24, r25
     6c8:	09 f4       	brne	.+2      	; 0x6cc <loop+0x16>
     6ca:	41 c0       	rjmp	.+130    	; 0x74e <loop+0x98>
     6cc:	40 91 7d 01 	lds	r20, 0x017D
     6d0:	50 91 7e 01 	lds	r21, 0x017E
     6d4:	60 91 7f 01 	lds	r22, 0x017F
     6d8:	70 91 80 01 	lds	r23, 0x0180
     6dc:	80 91 4e 01 	lds	r24, 0x014E
     6e0:	90 91 4f 01 	lds	r25, 0x014F
     6e4:	a0 91 50 01 	lds	r26, 0x0150
     6e8:	b0 91 51 01 	lds	r27, 0x0151
     6ec:	80 56       	subi	r24, 0x60	; 96
     6ee:	9f 4f       	sbci	r25, 0xFF	; 255
     6f0:	af 4f       	sbci	r26, 0xFF	; 255
     6f2:	bf 4f       	sbci	r27, 0xFF	; 255
     6f4:	84 17       	cp	r24, r20
     6f6:	95 07       	cpc	r25, r21
     6f8:	a6 07       	cpc	r26, r22
     6fa:	b7 07       	cpc	r27, r23
     6fc:	40 f5       	brcc	.+80     	; 0x74e <loop+0x98>
     6fe:	80 91 10 01 	lds	r24, 0x0110
     702:	90 91 11 01 	lds	r25, 0x0111
     706:	8f 3f       	cpi	r24, 0xFF	; 255
     708:	91 05       	cpc	r25, r1
     70a:	0c f5       	brge	.+66     	; 0x74e <loop+0x98>
    {   
        own_gradient = GRADIENT_MAX;
     70c:	8f ef       	ldi	r24, 0xFF	; 255
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	90 93 11 01 	sts	0x0111, r25
     714:	80 93 10 01 	sts	0x0110, r24
		formed_state = FORMED_NO;
     718:	10 92 1f 01 	sts	0x011F, r1
     71c:	10 92 1e 01 	sts	0x011E, r1

// Function to handle motion.
void set_motion(int new_motion)
{   
    // Only take an an action if the motion is being changed.
    if (current_motion != new_motion)
     720:	80 91 0e 01 	lds	r24, 0x010E
     724:	90 91 0f 01 	lds	r25, 0x010F
     728:	89 2b       	or	r24, r25
     72a:	41 f0       	breq	.+16     	; 0x73c <loop+0x86>
    {   
        current_motion = new_motion;
     72c:	10 92 0f 01 	sts	0x010F, r1
     730:	10 92 0e 01 	sts	0x010E, r1
        
        if (current_motion == STOP)
        {   
            set_motors(0, 0);
     734:	60 e0       	ldi	r22, 0x00	; 0
     736:	80 e0       	ldi	r24, 0x00	; 0
     738:	0e 94 b2 06 	call	0xd64	; 0xd64 <set_motors>
		}
    }
	else
	{
		set_motion(STOP);
		num_retain = 0;
     73c:	10 92 25 01 	sts	0x0125, r1
     740:	10 92 24 01 	sts	0x0124, r1
	}
}
     744:	ff 90       	pop	r15
     746:	ef 90       	pop	r14
     748:	df 90       	pop	r13
     74a:	cf 90       	pop	r12
     74c:	08 95       	ret
void loop() {
	//set_color(RGB(0, 0, 0));
	//set_led();
	check_own_gradient();
	// Move only when the sequence has already formed.
	if ((formed_state == FORMED_OK) && (own_gradient < GRADIENT_MAX))
     74e:	80 91 1e 01 	lds	r24, 0x011E
     752:	90 91 1f 01 	lds	r25, 0x011F
     756:	01 97       	sbiw	r24, 0x01	; 1
     758:	19 f7       	brne	.-58     	; 0x720 <loop+0x6a>
     75a:	80 91 10 01 	lds	r24, 0x0110
     75e:	90 91 11 01 	lds	r25, 0x0111
     762:	8f 3f       	cpi	r24, 0xFF	; 255
     764:	91 05       	cpc	r25, r1
     766:	e4 f6       	brge	.-72     	; 0x720 <loop+0x6a>
		//set_color(RGB(0, 0, 0));
		//if ((update_state_motivator == UPDATE) && (update_state_motivated == UPDATE) && (state_motivator == COMPLETED) && (state_motivated != MOVE)) 
		/*	
		*/

		if ((state_motivator == COMPLETED) && (state_motivated != MOVE))
     768:	80 91 28 01 	lds	r24, 0x0128
     76c:	90 91 29 01 	lds	r25, 0x0129
     770:	05 97       	sbiw	r24, 0x05	; 5
     772:	09 f0       	breq	.+2      	; 0x776 <loop+0xc0>
     774:	6a c0       	rjmp	.+212    	; 0x84a <loop+0x194>
     776:	80 91 2a 01 	lds	r24, 0x012A
     77a:	90 91 2b 01 	lds	r25, 0x012B
     77e:	04 97       	sbiw	r24, 0x04	; 4
     780:	09 f4       	brne	.+2      	; 0x784 <loop+0xce>
     782:	63 c0       	rjmp	.+198    	; 0x84a <loop+0x194>
		{
			// Update.
			if (flag_minor == GRADIENT_MINOR_NO)
     784:	80 91 36 01 	lds	r24, 0x0136
     788:	90 91 37 01 	lds	r25, 0x0137
     78c:	89 2b       	or	r24, r25
     78e:	21 f4       	brne	.+8      	; 0x798 <loop+0xe2>
			{
				update_state_motivator = UNUPDATE;
     790:	10 92 2f 01 	sts	0x012F, r1
     794:	10 92 2e 01 	sts	0x012E, r1
			}
			
			if (flag_maxest == GRADIENT_MAX_NO)
     798:	80 91 38 01 	lds	r24, 0x0138
     79c:	90 91 39 01 	lds	r25, 0x0139
     7a0:	89 2b       	or	r24, r25
     7a2:	21 f4       	brne	.+8      	; 0x7ac <loop+0xf6>
			{
				update_state_motivated = UNUPDATE;
     7a4:	10 92 31 01 	sts	0x0131, r1
     7a8:	10 92 30 01 	sts	0x0130, r1
			// due to frequency motion changes.
			// If leave the motivator too near,
			// and leave the motivated far enough,
			// then I can move.

			if ((distance_to_motivator <= DISTANCE_MOVE) && (distance_to_motivated > DISTANCE_COLLIDE))
     7ac:	80 91 04 01 	lds	r24, 0x0104
     7b0:	90 91 05 01 	lds	r25, 0x0105
     7b4:	c6 97       	sbiw	r24, 0x36	; 54
     7b6:	0c f0       	brlt	.+2      	; 0x7ba <loop+0x104>
     7b8:	5b c0       	rjmp	.+182    	; 0x870 <loop+0x1ba>
     7ba:	80 91 02 01 	lds	r24, 0x0102
     7be:	90 91 03 01 	lds	r25, 0x0103
     7c2:	87 97       	sbiw	r24, 0x27	; 39
     7c4:	0c f4       	brge	.+2      	; 0x7c8 <loop+0x112>
     7c6:	54 c0       	rjmp	.+168    	; 0x870 <loop+0x1ba>
			{
				//set_color(RGB(0, 1, 0));
			    if (kilo_ticks > (last_motion_update + TIME_LAST_MOTION_UPDATE))
     7c8:	60 91 7d 01 	lds	r22, 0x017D
     7cc:	70 91 7e 01 	lds	r23, 0x017E
     7d0:	80 91 7f 01 	lds	r24, 0x017F
     7d4:	90 91 80 01 	lds	r25, 0x0180
     7d8:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <__floatunsisf>
     7dc:	6b 01       	movw	r12, r22
     7de:	7c 01       	movw	r14, r24
     7e0:	60 91 4a 01 	lds	r22, 0x014A
     7e4:	70 91 4b 01 	lds	r23, 0x014B
     7e8:	80 91 4c 01 	lds	r24, 0x014C
     7ec:	90 91 4d 01 	lds	r25, 0x014D
     7f0:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <__floatunsisf>
     7f4:	2d ec       	ldi	r18, 0xCD	; 205
     7f6:	3c ec       	ldi	r19, 0xCC	; 204
     7f8:	4c e4       	ldi	r20, 0x4C	; 76
     7fa:	51 e4       	ldi	r21, 0x41	; 65
     7fc:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <__addsf3>
     800:	9b 01       	movw	r18, r22
     802:	ac 01       	movw	r20, r24
     804:	c7 01       	movw	r24, r14
     806:	b6 01       	movw	r22, r12
     808:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <__gesf2>
     80c:	18 16       	cp	r1, r24
     80e:	0c f0       	brlt	.+2      	; 0x812 <loop+0x15c>
     810:	99 cf       	rjmp	.-206    	; 0x744 <loop+0x8e>
				{
					last_motion_update = kilo_ticks;
     812:	80 91 7d 01 	lds	r24, 0x017D
     816:	90 91 7e 01 	lds	r25, 0x017E
     81a:	a0 91 7f 01 	lds	r26, 0x017F
     81e:	b0 91 80 01 	lds	r27, 0x0180
     822:	80 93 4a 01 	sts	0x014A, r24
     826:	90 93 4b 01 	sts	0x014B, r25
     82a:	a0 93 4c 01 	sts	0x014C, r26
     82e:	b0 93 4d 01 	sts	0x014D, r27
					state_myself = MOVE;
     832:	84 e0       	ldi	r24, 0x04	; 4
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	90 93 27 01 	sts	0x0127, r25
     83a:	80 93 26 01 	sts	0x0126, r24
	else
	{
		set_motion(STOP);
		num_retain = 0;
	}
}
     83e:	ff 90       	pop	r15
     840:	ef 90       	pop	r14
     842:	df 90       	pop	r13
     844:	cf 90       	pop	r12
				//set_color(RGB(0, 1, 0));
			    if (kilo_ticks > (last_motion_update + TIME_LAST_MOTION_UPDATE))
				{
					last_motion_update = kilo_ticks;
					state_myself = MOVE;
					move();
     846:	0c 94 53 02 	jmp	0x4a6	; 0x4a6 <move>

// Function to handle motion.
void set_motion(int new_motion)
{   
    // Only take an an action if the motion is being changed.
    if (current_motion != new_motion)
     84a:	80 91 0e 01 	lds	r24, 0x010E
     84e:	90 91 0f 01 	lds	r25, 0x010F
     852:	89 2b       	or	r24, r25
     854:	09 f4       	brne	.+2      	; 0x858 <loop+0x1a2>
     856:	76 cf       	rjmp	.-276    	; 0x744 <loop+0x8e>
    {   
        current_motion = new_motion;
     858:	10 92 0f 01 	sts	0x010F, r1
     85c:	10 92 0e 01 	sts	0x010E, r1
        
        if (current_motion == STOP)
        {   
            set_motors(0, 0);
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		set_motion(STOP);
		num_retain = 0;
	}
}
     864:	ff 90       	pop	r15
     866:	ef 90       	pop	r14
     868:	df 90       	pop	r13
     86a:	cf 90       	pop	r12
    {   
        current_motion = new_motion;
        
        if (current_motion == STOP)
        {   
            set_motors(0, 0);
     86c:	0c 94 b2 06 	jmp	0xd64	; 0xd64 <set_motors>

// Function to handle motion.
void set_motion(int new_motion)
{   
    // Only take an an action if the motion is being changed.
    if (current_motion != new_motion)
     870:	80 91 0e 01 	lds	r24, 0x010E
     874:	90 91 0f 01 	lds	r25, 0x010F
     878:	89 2b       	or	r24, r25
     87a:	41 f0       	breq	.+16     	; 0x88c <loop+0x1d6>
    {   
        current_motion = new_motion;
     87c:	10 92 0f 01 	sts	0x010F, r1
     880:	10 92 0e 01 	sts	0x010E, r1
        
        if (current_motion == STOP)
        {   
            set_motors(0, 0);
     884:	60 e0       	ldi	r22, 0x00	; 0
     886:	80 e0       	ldi	r24, 0x00	; 0
     888:	0e 94 b2 06 	call	0xd64	; 0xd64 <set_motors>
			}
			else
			{
				//set_color(RGB(0, 0, 1));
				set_motion(STOP);
				state_myself = COMPLETED;
     88c:	85 e0       	ldi	r24, 0x05	; 5
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	90 93 27 01 	sts	0x0127, r25
     894:	80 93 26 01 	sts	0x0126, r24
				num_retain = 0;
     898:	10 92 25 01 	sts	0x0125, r1
     89c:	10 92 24 01 	sts	0x0124, r1
     8a0:	51 cf       	rjmp	.-350    	; 0x744 <loop+0x8e>

000008a2 <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     8a2:	08 95       	ret

000008a4 <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     8a4:	80 e0       	ldi	r24, 0x00	; 0
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	08 95       	ret

000008aa <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     8aa:	08 95       	ret

000008ac <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     8ac:	df 92       	push	r13
     8ae:	ef 92       	push	r14
     8b0:	ff 92       	push	r15
     8b2:	0f 93       	push	r16
     8b4:	1f 93       	push	r17
     8b6:	cf 93       	push	r28
     8b8:	df 93       	push	r29
    cli();
     8ba:	f8 94       	cli

    ports_off();
     8bc:	14 b8       	out	0x04, r1	; 4
     8be:	17 b8       	out	0x07, r1	; 7
     8c0:	1a b8       	out	0x0a, r1	; 10
     8c2:	15 b8       	out	0x05, r1	; 5
     8c4:	18 b8       	out	0x08, r1	; 8
     8c6:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     8c8:	52 9a       	sbi	0x0a, 2	; 10
     8ca:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     8cc:	14 bc       	out	0x24, r1	; 36
     8ce:	85 e0       	ldi	r24, 0x05	; 5
     8d0:	85 bd       	out	0x25, r24	; 37
     8d2:	8f ef       	ldi	r24, 0xFF	; 255
     8d4:	87 bd       	out	0x27, r24	; 39
     8d6:	22 e0       	ldi	r18, 0x02	; 2
     8d8:	20 93 6e 00 	sts	0x006E, r18
    rx_timer_setup();
     8dc:	10 92 80 00 	sts	0x0080, r1
     8e0:	10 92 81 00 	sts	0x0081, r1
     8e4:	8f e8       	ldi	r24, 0x8F	; 143
     8e6:	9b e0       	ldi	r25, 0x0B	; 11
     8e8:	90 93 89 00 	sts	0x0089, r25
     8ec:	80 93 88 00 	sts	0x0088, r24
     8f0:	20 93 6f 00 	sts	0x006F, r18
    motors_setup();
     8f4:	53 98       	cbi	0x0a, 3	; 10
     8f6:	23 98       	cbi	0x04, 3	; 4
     8f8:	81 ea       	ldi	r24, 0xA1	; 161
     8fa:	80 93 b0 00 	sts	0x00B0, r24
     8fe:	20 93 b1 00 	sts	0x00B1, r18
     902:	10 92 b4 00 	sts	0x00B4, r1
     906:	10 92 b3 00 	sts	0x00B3, r1
    acomp_setup();
     90a:	8b e0       	ldi	r24, 0x0B	; 11
     90c:	80 bf       	out	0x30, r24	; 48
     90e:	83 e0       	ldi	r24, 0x03	; 3
     910:	80 93 7f 00 	sts	0x007F, r24
    adc_setup();
     914:	86 e0       	ldi	r24, 0x06	; 6
     916:	80 93 7c 00 	sts	0x007C, r24
     91a:	83 e8       	ldi	r24, 0x83	; 131
     91c:	80 93 7a 00 	sts	0x007A, r24
     920:	80 91 7a 00 	lds	r24, 0x007A
     924:	80 64       	ori	r24, 0x40	; 64
     926:	80 93 7a 00 	sts	0x007A, r24
     92a:	80 91 7a 00 	lds	r24, 0x007A
     92e:	86 fd       	sbrc	r24, 6
     930:	fc cf       	rjmp	.-8      	; 0x92a <__stack+0x2b>
    adc_trigger_high_gain();
     932:	10 92 7c 00 	sts	0x007C, r1
     936:	83 ea       	ldi	r24, 0xA3	; 163
     938:	80 93 7a 00 	sts	0x007A, r24
     93c:	81 e0       	ldi	r24, 0x01	; 1
     93e:	80 93 7b 00 	sts	0x007B, r24

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     942:	81 e0       	ldi	r24, 0x01	; 1
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	0e 94 2d 10 	call	0x205a	; 0x205a <__eerd_byte_m328p>
    if (osccal != 0xFF)
     94a:	8f 3f       	cpi	r24, 0xFF	; 255
     94c:	11 f0       	breq	.+4      	; 0x952 <__stack+0x53>
        OSCCAL = osccal;
     94e:	80 93 66 00 	sts	0x0066, r24

    rx_busy = 0;
     952:	10 92 81 01 	sts	0x0181, r1
    rx_leadingbit = 1;
     956:	c1 e0       	ldi	r28, 0x01	; 1
     958:	c0 93 5a 01 	sts	0x015A, r28
    rx_leadingbyte = 1;
     95c:	c0 93 9e 01 	sts	0x019E, r28
    rx_byteindex = 0;
     960:	10 92 78 01 	sts	0x0178, r1
    rx_bytevalue = 0;
     964:	10 92 b2 01 	sts	0x01B2, r1
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     968:	80 e9       	ldi	r24, 0x90	; 144
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	0e 94 2d 10 	call	0x205a	; 0x205a <__eerd_byte_m328p>
     970:	80 93 77 01 	sts	0x0177, r24
    if (tx_mask & ~TX_MASK_MAX)
     974:	80 91 77 01 	lds	r24, 0x0177
     978:	88 73       	andi	r24, 0x38	; 56
     97a:	11 f0       	breq	.+4      	; 0x980 <__stack+0x81>
        tx_mask = TX_MASK_MIN;
     97c:	c0 93 77 01 	sts	0x0177, r28
    tx_clock = 0;
     980:	10 92 a2 01 	sts	0x01A2, r1
     984:	10 92 a1 01 	sts	0x01A1, r1
    tx_increment = 255;
     988:	8f ef       	ldi	r24, 0xFF	; 255
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	90 93 a0 01 	sts	0x01A0, r25
     990:	80 93 9f 01 	sts	0x019F, r24
    kilo_ticks = 0;
     994:	10 92 7d 01 	sts	0x017D, r1
     998:	10 92 7e 01 	sts	0x017E, r1
     99c:	10 92 7f 01 	sts	0x017F, r1
     9a0:	10 92 80 01 	sts	0x0180, r1
    kilo_state = IDLE;
     9a4:	81 e0       	ldi	r24, 0x01	; 1
     9a6:	80 93 3d 01 	sts	0x013D, r24
    kilo_tx_period = 3906;
     9aa:	82 e4       	ldi	r24, 0x42	; 66
     9ac:	9f e0       	ldi	r25, 0x0F	; 15
     9ae:	90 93 b1 01 	sts	0x01B1, r25
     9b2:	80 93 b0 01 	sts	0x01B0, r24
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     9b6:	80 eb       	ldi	r24, 0xB0	; 176
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	0e 94 2d 10 	call	0x205a	; 0x205a <__eerd_byte_m328p>
     9be:	c8 2f       	mov	r28, r24
     9c0:	81 eb       	ldi	r24, 0xB1	; 177
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	0e 94 2d 10 	call	0x205a	; 0x205a <__eerd_byte_m328p>
     9c8:	2c 2f       	mov	r18, r28
     9ca:	30 e0       	ldi	r19, 0x00	; 0
     9cc:	38 2b       	or	r19, r24
     9ce:	30 93 b4 01 	sts	0x01B4, r19
     9d2:	20 93 b3 01 	sts	0x01B3, r18
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     9d6:	85 e0       	ldi	r24, 0x05	; 5
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	0e 94 2d 10 	call	0x205a	; 0x205a <__eerd_byte_m328p>
     9de:	80 93 b7 01 	sts	0x01B7, r24
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     9e2:	89 e0       	ldi	r24, 0x09	; 9
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	0e 94 2d 10 	call	0x205a	; 0x205a <__eerd_byte_m328p>
     9ea:	80 93 a3 01 	sts	0x01A3, r24
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     9ee:	8c e0       	ldi	r24, 0x0C	; 12
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	0e 94 2d 10 	call	0x205a	; 0x205a <__eerd_byte_m328p>
     9f6:	80 93 b5 01 	sts	0x01B5, r24
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     9fa:	84 e1       	ldi	r24, 0x14	; 20
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	0e 94 2d 10 	call	0x205a	; 0x205a <__eerd_byte_m328p>
     a02:	80 93 b6 01 	sts	0x01B6, r24
     a06:	52 e8       	ldi	r21, 0x82	; 130
     a08:	e5 2e       	mov	r14, r21
     a0a:	51 e0       	ldi	r21, 0x01	; 1
     a0c:	f5 2e       	mov	r15, r21
     a0e:	0b e5       	ldi	r16, 0x5B	; 91
     a10:	11 e0       	ldi	r17, 0x01	; 1
     a12:	c0 e2       	ldi	r28, 0x20	; 32
     a14:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     a16:	ce 01       	movw	r24, r28
     a18:	0e 94 2d 10 	call	0x205a	; 0x205a <__eerd_byte_m328p>
     a1c:	d8 2e       	mov	r13, r24
     a1e:	ce 01       	movw	r24, r28
     a20:	01 96       	adiw	r24, 0x01	; 1
     a22:	0e 94 2d 10 	call	0x205a	; 0x205a <__eerd_byte_m328p>
     a26:	2d 2d       	mov	r18, r13
     a28:	30 e0       	ldi	r19, 0x00	; 0
     a2a:	32 2f       	mov	r19, r18
     a2c:	22 27       	eor	r18, r18
     a2e:	28 2b       	or	r18, r24
     a30:	f7 01       	movw	r30, r14
     a32:	21 93       	st	Z+, r18
     a34:	31 93       	st	Z+, r19
     a36:	7f 01       	movw	r14, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     a38:	ce 01       	movw	r24, r28
     a3a:	c0 96       	adiw	r24, 0x30	; 48
     a3c:	0e 94 2d 10 	call	0x205a	; 0x205a <__eerd_byte_m328p>
     a40:	d8 2e       	mov	r13, r24
     a42:	ce 01       	movw	r24, r28
     a44:	c1 96       	adiw	r24, 0x31	; 49
     a46:	0e 94 2d 10 	call	0x205a	; 0x205a <__eerd_byte_m328p>
     a4a:	2d 2d       	mov	r18, r13
     a4c:	30 e0       	ldi	r19, 0x00	; 0
     a4e:	32 2f       	mov	r19, r18
     a50:	22 27       	eor	r18, r18
     a52:	28 2b       	or	r18, r24
     a54:	f8 01       	movw	r30, r16
     a56:	21 93       	st	Z+, r18
     a58:	31 93       	st	Z+, r19
     a5a:	8f 01       	movw	r16, r30
     a5c:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     a5e:	cc 33       	cpi	r28, 0x3C	; 60
     a60:	d1 05       	cpc	r29, r1
     a62:	c9 f6       	brne	.-78     	; 0xa16 <__stack+0x117>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     a64:	78 94       	sei
}
     a66:	df 91       	pop	r29
     a68:	cf 91       	pop	r28
     a6a:	1f 91       	pop	r17
     a6c:	0f 91       	pop	r16
     a6e:	ff 90       	pop	r15
     a70:	ef 90       	pop	r14
     a72:	df 90       	pop	r13
     a74:	08 95       	ret

00000a76 <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     a76:	1f 92       	push	r1
     a78:	0f 92       	push	r0
     a7a:	0f b6       	in	r0, 0x3f	; 63
     a7c:	0f 92       	push	r0
     a7e:	11 24       	eor	r1, r1
     a80:	8f 93       	push	r24
    wdt_disable();
     a82:	88 e1       	ldi	r24, 0x18	; 24
     a84:	0f b6       	in	r0, 0x3f	; 63
     a86:	f8 94       	cli
     a88:	80 93 60 00 	sts	0x0060, r24
     a8c:	10 92 60 00 	sts	0x0060, r1
     a90:	0f be       	out	0x3f, r0	; 63
}
     a92:	8f 91       	pop	r24
     a94:	0f 90       	pop	r0
     a96:	0f be       	out	0x3f, r0	; 63
     a98:	0f 90       	pop	r0
     a9a:	1f 90       	pop	r1
     a9c:	18 95       	reti

00000a9e <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     a9e:	7c 01       	movw	r14, r24
     aa0:	eb 01       	movw	r28, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     aa2:	d1 2c       	mov	r13, r1
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     aa4:	88 24       	eor	r8, r8
     aa6:	8a 94       	dec	r8
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     aa8:	64 e0       	ldi	r22, 0x04	; 4
     aaa:	b6 2e       	mov	r11, r22

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
        cli();                                    // disable interrupts
        adc_setup_conversion(6);
     aac:	76 e0       	ldi	r23, 0x06	; 6
     aae:	97 2e       	mov	r9, r23
     ab0:	e3 e8       	ldi	r30, 0x83	; 131
     ab2:	ae 2e       	mov	r10, r30
            case SLEEPING:
                cli();
                acomp_off();
                adc_off();
                ports_off();
                wdt_enable(WDTO_8S);
     ab4:	08 e1       	ldi	r16, 0x18	; 24
     ab6:	10 e0       	ldi	r17, 0x00	; 0
     ab8:	f9 e2       	ldi	r31, 0x29	; 41
     aba:	cf 2e       	mov	r12, r31

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     abc:	e0 91 3d 01 	lds	r30, 0x013D
     ac0:	f0 e0       	ldi	r31, 0x00	; 0
     ac2:	e7 30       	cpi	r30, 0x07	; 7
     ac4:	f1 05       	cpc	r31, r1
     ac6:	d0 f7       	brcc	.-12     	; 0xabc <kilo_start+0x1e>
     ac8:	ec 5c       	subi	r30, 0xCC	; 204
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	0c 94 ed 0d 	jmp	0x1bda	; 0x1bda <__tablejump2__>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
     ad0:	dd 20       	and	r13, r13
     ad2:	09 f4       	brne	.+2      	; 0xad6 <kilo_start+0x38>
     ad4:	fd c0       	rjmp	.+506    	; 0xcd0 <kilo_start+0x232>
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     ad6:	b0 92 3d 01 	sts	0x013D, r11
     ada:	dd 24       	eor	r13, r13
     adc:	d3 94       	inc	r13
            case RUNNING:
                loop();
     ade:	fe 01       	movw	r30, r28
     ae0:	09 95       	icall
                break;
     ae2:	ec cf       	rjmp	.-40     	; 0xabc <kilo_start+0x1e>
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     ae4:	80 91 81 01 	lds	r24, 0x0181
     ae8:	81 11       	cpse	r24, r1
     aea:	eb c0       	rjmp	.+470    	; 0xcc2 <kilo_start+0x224>
        cli();                                    // disable interrupts
     aec:	f8 94       	cli
        adc_setup_conversion(6);
     aee:	90 92 7c 00 	sts	0x007C, r9
     af2:	a0 92 7a 00 	sts	0x007A, r10
        adc_start_conversion();
     af6:	80 91 7a 00 	lds	r24, 0x007A
     afa:	80 64       	ori	r24, 0x40	; 64
     afc:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     b00:	80 91 7a 00 	lds	r24, 0x007A
     b04:	86 fd       	sbrc	r24, 6
     b06:	fc cf       	rjmp	.-8      	; 0xb00 <kilo_start+0x62>
        voltage = ADCW;                           // store AD result
     b08:	20 91 78 00 	lds	r18, 0x0078
     b0c:	30 91 79 00 	lds	r19, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     b10:	78 94       	sei
                set_color(RGB(0,0,0));
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
                if(voltage > 682)
     b12:	2b 3a       	cpi	r18, 0xAB	; 171
     b14:	92 e0       	ldi	r25, 0x02	; 2
     b16:	39 07       	cpc	r19, r25
     b18:	0c f0       	brlt	.+2      	; 0xb1c <kilo_start+0x7e>
     b1a:	ed c0       	rjmp	.+474    	; 0xcf6 <kilo_start+0x258>
                    set_color(RGB(0,3,0));
                else if(voltage > 648)
     b1c:	29 38       	cpi	r18, 0x89	; 137
     b1e:	e2 e0       	ldi	r30, 0x02	; 2
     b20:	3e 07       	cpc	r19, r30
     b22:	0c f0       	brlt	.+2      	; 0xb26 <kilo_start+0x88>
     b24:	ef c0       	rjmp	.+478    	; 0xd04 <kilo_start+0x266>
                    set_color(RGB(0,0,3));
                else if(voltage > 614)
     b26:	27 36       	cpi	r18, 0x67	; 103
     b28:	32 40       	sbci	r19, 0x02	; 2
     b2a:	0c f4       	brge	.+2      	; 0xb2e <kilo_start+0x90>
     b2c:	ca c0       	rjmp	.+404    	; 0xcc2 <kilo_start+0x224>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     b2e:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     b30:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     b32:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     b34:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     b36:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     b38:	3c 98       	cbi	0x07, 4	; 7
     b3a:	c0 cf       	rjmp	.-128    	; 0xabc <kilo_start+0x1e>
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
            case SLEEPING:
                cli();
     b3c:	f8 94       	cli
                acomp_off();
     b3e:	80 b7       	in	r24, 0x30	; 48
     b40:	87 7f       	andi	r24, 0xF7	; 247
     b42:	80 bf       	out	0x30, r24	; 48
                adc_off();
     b44:	80 91 7a 00 	lds	r24, 0x007A
     b48:	8f 77       	andi	r24, 0x7F	; 127
     b4a:	80 93 7a 00 	sts	0x007A, r24
                ports_off();
     b4e:	14 b8       	out	0x04, r1	; 4
     b50:	17 b8       	out	0x07, r1	; 7
     b52:	1a b8       	out	0x0a, r1	; 10
     b54:	15 b8       	out	0x05, r1	; 5
     b56:	18 b8       	out	0x08, r1	; 8
     b58:	1b b8       	out	0x0b, r1	; 11
                wdt_enable(WDTO_8S);
     b5a:	0f b6       	in	r0, 0x3f	; 63
     b5c:	f8 94       	cli
     b5e:	a8 95       	wdr
     b60:	00 93 60 00 	sts	0x0060, r16
     b64:	0f be       	out	0x3f, r0	; 63
     b66:	c0 92 60 00 	sts	0x0060, r12
                WDTCSR |= (1<<WDIE);
     b6a:	80 91 60 00 	lds	r24, 0x0060
     b6e:	80 64       	ori	r24, 0x40	; 64
     b70:	80 93 60 00 	sts	0x0060, r24
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     b74:	83 b7       	in	r24, 0x33	; 51
     b76:	81 7f       	andi	r24, 0xF1	; 241
     b78:	84 60       	ori	r24, 0x04	; 4
     b7a:	83 bf       	out	0x33, r24	; 51
                cli();
     b7c:	f8 94       	cli
                sleep_enable();
     b7e:	83 b7       	in	r24, 0x33	; 51
     b80:	81 60       	ori	r24, 0x01	; 1
     b82:	83 bf       	out	0x33, r24	; 51
                sei();
     b84:	78 94       	sei
                sleep_cpu();
     b86:	88 95       	sleep
                sleep_disable();
     b88:	83 b7       	in	r24, 0x33	; 51
     b8a:	8e 7f       	andi	r24, 0xFE	; 254
     b8c:	83 bf       	out	0x33, r24	; 51
                sei();
     b8e:	78 94       	sei
                rx_busy = 0;
     b90:	10 92 81 01 	sts	0x0181, r1
                ports_on();
     b94:	52 9a       	sbi	0x0a, 2	; 10
     b96:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     b98:	80 91 7a 00 	lds	r24, 0x007A
     b9c:	80 68       	ori	r24, 0x80	; 128
     b9e:	80 93 7a 00 	sts	0x007A, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ba2:	87 e5       	ldi	r24, 0x57	; 87
     ba4:	92 e0       	ldi	r25, 0x02	; 2
     ba6:	01 97       	sbiw	r24, 0x01	; 1
     ba8:	f1 f7       	brne	.-4      	; 0xba6 <kilo_start+0x108>
     baa:	00 c0       	rjmp	.+0      	; 0xbac <kilo_start+0x10e>
     bac:	00 00       	nop
                _delay_us(300);
                acomp_on();
     bae:	80 b7       	in	r24, 0x30	; 48
     bb0:	88 61       	ori	r24, 0x18	; 24
     bb2:	80 bf       	out	0x30, r24	; 48

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     bb4:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     bb6:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     bb8:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     bba:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     bbc:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     bbe:	3c 9a       	sbi	0x07, 4	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     bc0:	ef e1       	ldi	r30, 0x1F	; 31
     bc2:	fe e4       	ldi	r31, 0x4E	; 78
     bc4:	31 97       	sbiw	r30, 0x01	; 1
     bc6:	f1 f7       	brne	.-4      	; 0xbc4 <kilo_start+0x126>
     bc8:	00 c0       	rjmp	.+0      	; 0xbca <kilo_start+0x12c>
     bca:	00 00       	nop
                _delay_us(300);
                acomp_on();

                set_color(RGB(3,3,3));
                _delay_ms(10);
                if (rx_busy) {
     bcc:	80 91 81 01 	lds	r24, 0x0181
     bd0:	81 11       	cpse	r24, r1
     bd2:	81 c0       	rjmp	.+258    	; 0xcd6 <kilo_start+0x238>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     bd4:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     bd6:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     bd8:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     bda:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     bdc:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     bde:	3c 98       	cbi	0x07, 4	; 7
     be0:	6d cf       	rjmp	.-294    	; 0xabc <kilo_start+0x1e>
                kilo_state = RUNNING;
            case RUNNING:
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     be2:	80 91 3b 01 	lds	r24, 0x013B
     be6:	81 11       	cpse	r24, r1
     be8:	41 c0       	rjmp	.+130    	; 0xc6c <kilo_start+0x1ce>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     bea:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     bee:	10 92 b4 00 	sts	0x00B4, r1
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     bf2:	10 92 3c 01 	sts	0x013C, r1
     bf6:	62 cf       	rjmp	.-316    	; 0xabc <kilo_start+0x1e>
                    set_color(RGB(3,3,0));
                else
                    set_color(RGB(3,0,0));
                break;
            case CHARGING:
                if (is_charging()) {
     bf8:	48 99       	sbic	0x09, 0	; 9
     bfa:	ec cf       	rjmp	.-40     	; 0xbd4 <kilo_start+0x136>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     bfc:	55 9a       	sbi	0x0a, 5	; 10
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     bfe:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     c00:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     c02:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     c04:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     c06:	3c 98       	cbi	0x07, 4	; 7
     c08:	8f ec       	ldi	r24, 0xCF	; 207
     c0a:	97 e0       	ldi	r25, 0x07	; 7
     c0c:	01 97       	sbiw	r24, 0x01	; 1
     c0e:	f1 f7       	brne	.-4      	; 0xc0c <kilo_start+0x16e>
     c10:	00 c0       	rjmp	.+0      	; 0xc12 <kilo_start+0x174>
     c12:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     c14:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     c16:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     c18:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     c1a:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     c1c:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     c1e:	3c 98       	cbi	0x07, 4	; 7
     c20:	9f ef       	ldi	r25, 0xFF	; 255
     c22:	e1 ee       	ldi	r30, 0xE1	; 225
     c24:	f4 e0       	ldi	r31, 0x04	; 4
     c26:	91 50       	subi	r25, 0x01	; 1
     c28:	e0 40       	sbci	r30, 0x00	; 0
     c2a:	f0 40       	sbci	r31, 0x00	; 0
     c2c:	e1 f7       	brne	.-8      	; 0xc26 <kilo_start+0x188>
     c2e:	00 c0       	rjmp	.+0      	; 0xc30 <kilo_start+0x192>
     c30:	00 00       	nop
     c32:	44 cf       	rjmp	.-376    	; 0xabc <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     c34:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     c36:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     c38:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     c3a:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     c3c:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     c3e:	3c 98       	cbi	0x07, 4	; 7
     c40:	ef ec       	ldi	r30, 0xCF	; 207
     c42:	f7 e0       	ldi	r31, 0x07	; 7
     c44:	31 97       	sbiw	r30, 0x01	; 1
     c46:	f1 f7       	brne	.-4      	; 0xc44 <kilo_start+0x1a6>
     c48:	00 c0       	rjmp	.+0      	; 0xc4a <kilo_start+0x1ac>
     c4a:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     c4c:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     c4e:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     c50:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     c52:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     c54:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     c56:	3c 98       	cbi	0x07, 4	; 7
     c58:	ff ef       	ldi	r31, 0xFF	; 255
     c5a:	21 ee       	ldi	r18, 0xE1	; 225
     c5c:	84 e0       	ldi	r24, 0x04	; 4
     c5e:	f1 50       	subi	r31, 0x01	; 1
     c60:	20 40       	sbci	r18, 0x00	; 0
     c62:	80 40       	sbci	r24, 0x00	; 0
     c64:	e1 f7       	brne	.-8      	; 0xc5e <kilo_start+0x1c0>
     c66:	00 c0       	rjmp	.+0      	; 0xc68 <kilo_start+0x1ca>
     c68:	00 00       	nop
     c6a:	28 cf       	rjmp	.-432    	; 0xabc <kilo_start+0x1e>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
                } else {
                    if (cur_motion != prev_motion) {
     c6c:	90 91 3b 01 	lds	r25, 0x013B
     c70:	80 91 3c 01 	lds	r24, 0x013C
     c74:	98 17       	cp	r25, r24
     c76:	09 f4       	brne	.+2      	; 0xc7a <kilo_start+0x1dc>
     c78:	21 cf       	rjmp	.-446    	; 0xabc <kilo_start+0x1e>
                        prev_motion = cur_motion;
     c7a:	80 91 3b 01 	lds	r24, 0x013B
     c7e:	80 93 3c 01 	sts	0x013C, r24
                        if (cur_motion == MOVE_LEFT) {
     c82:	80 91 3b 01 	lds	r24, 0x013B
     c86:	81 30       	cpi	r24, 0x01	; 1
     c88:	09 f4       	brne	.+2      	; 0xc8c <kilo_start+0x1ee>
     c8a:	50 c0       	rjmp	.+160    	; 0xd2c <kilo_start+0x28e>
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     c8c:	80 91 3b 01 	lds	r24, 0x013B
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     c90:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     c94:	80 92 b4 00 	sts	0x00B4, r8
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     c98:	82 30       	cpi	r24, 0x02	; 2
     c9a:	d9 f1       	breq	.+118    	; 0xd12 <kilo_start+0x274>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     c9c:	80 92 b3 00 	sts	0x00B3, r8
    OCR2B = cw;
     ca0:	80 92 b4 00 	sts	0x00B4, r8
     ca4:	8f e2       	ldi	r24, 0x2F	; 47
     ca6:	95 e7       	ldi	r25, 0x75	; 117
     ca8:	01 97       	sbiw	r24, 0x01	; 1
     caa:	f1 f7       	brne	.-4      	; 0xca8 <kilo_start+0x20a>
     cac:	00 c0       	rjmp	.+0      	; 0xcae <kilo_start+0x210>
     cae:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     cb0:	80 91 b6 01 	lds	r24, 0x01B6
     cb4:	90 91 b5 01 	lds	r25, 0x01B5
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     cb8:	90 93 b3 00 	sts	0x00B3, r25
    OCR2B = cw;
     cbc:	80 93 b4 00 	sts	0x00B4, r24
     cc0:	fd ce       	rjmp	.-518    	; 0xabc <kilo_start+0x1e>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     cc2:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     cc4:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     cc6:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     cc8:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     cca:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     ccc:	3c 98       	cbi	0x07, 4	; 7
     cce:	f6 ce       	rjmp	.-532    	; 0xabc <kilo_start+0x1e>
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
                    setup();
     cd0:	f7 01       	movw	r30, r14
     cd2:	09 95       	icall
     cd4:	00 cf       	rjmp	.-512    	; 0xad6 <kilo_start+0x38>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     cd6:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     cd8:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     cda:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     cdc:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     cde:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     ce0:	3c 98       	cbi	0x07, 4	; 7
     ce2:	ff ef       	ldi	r31, 0xFF	; 255
     ce4:	20 e7       	ldi	r18, 0x70	; 112
     ce6:	82 e0       	ldi	r24, 0x02	; 2
     ce8:	f1 50       	subi	r31, 0x01	; 1
     cea:	20 40       	sbci	r18, 0x00	; 0
     cec:	80 40       	sbci	r24, 0x00	; 0
     cee:	e1 f7       	brne	.-8      	; 0xce8 <kilo_start+0x24a>
     cf0:	00 c0       	rjmp	.+0      	; 0xcf2 <kilo_start+0x254>
     cf2:	00 00       	nop
     cf4:	6f cf       	rjmp	.-290    	; 0xbd4 <kilo_start+0x136>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     cf6:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     cf8:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     cfa:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     cfc:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     cfe:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     d00:	3c 98       	cbi	0x07, 4	; 7
     d02:	dc ce       	rjmp	.-584    	; 0xabc <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     d04:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     d06:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     d08:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     d0a:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     d0c:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     d0e:	3c 9a       	sbi	0x07, 4	; 7
     d10:	d5 ce       	rjmp	.-598    	; 0xabc <kilo_start+0x1e>
     d12:	ef e2       	ldi	r30, 0x2F	; 47
     d14:	f5 e7       	ldi	r31, 0x75	; 117
     d16:	31 97       	sbiw	r30, 0x01	; 1
     d18:	f1 f7       	brne	.-4      	; 0xd16 <kilo_start+0x278>
     d1a:	00 c0       	rjmp	.+0      	; 0xd1c <kilo_start+0x27e>
     d1c:	00 00       	nop
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     d1e:	80 91 a3 01 	lds	r24, 0x01A3
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     d22:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     d26:	80 93 b4 00 	sts	0x00B4, r24
     d2a:	c8 ce       	rjmp	.-624    	; 0xabc <kilo_start+0x1e>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     d2c:	80 92 b3 00 	sts	0x00B3, r8
    OCR2B = cw;
     d30:	10 92 b4 00 	sts	0x00B4, r1
     d34:	8f e2       	ldi	r24, 0x2F	; 47
     d36:	95 e7       	ldi	r25, 0x75	; 117
     d38:	01 97       	sbiw	r24, 0x01	; 1
     d3a:	f1 f7       	brne	.-4      	; 0xd38 <kilo_start+0x29a>
     d3c:	00 c0       	rjmp	.+0      	; 0xd3e <kilo_start+0x2a0>
     d3e:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     d40:	80 91 b7 01 	lds	r24, 0x01B7
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     d44:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     d48:	10 92 b4 00 	sts	0x00B4, r1
     d4c:	b7 ce       	rjmp	.-658    	; 0xabc <kilo_start+0x1e>

00000d4e <delay>:
        default:
            break;
    }
}

void delay(uint16_t ms) {
     d4e:	07 c0       	rjmp	.+14     	; 0xd5e <delay+0x10>
     d50:	ef ec       	ldi	r30, 0xCF	; 207
     d52:	f7 e0       	ldi	r31, 0x07	; 7
     d54:	31 97       	sbiw	r30, 0x01	; 1
     d56:	f1 f7       	brne	.-4      	; 0xd54 <delay+0x6>
     d58:	00 c0       	rjmp	.+0      	; 0xd5a <delay+0xc>
     d5a:	00 00       	nop
    while (ms > 0) {
        _delay_ms(1);
        ms--;
     d5c:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     d5e:	00 97       	sbiw	r24, 0x00	; 0
     d60:	b9 f7       	brne	.-18     	; 0xd50 <delay+0x2>
     d62:	08 95       	ret

00000d64 <set_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     d64:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     d68:	60 93 b4 00 	sts	0x00B4, r22
     d6c:	08 95       	ret

00000d6e <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     d6e:	8f ef       	ldi	r24, 0xFF	; 255
     d70:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     d74:	80 93 b4 00 	sts	0x00B4, r24
     d78:	8f e0       	ldi	r24, 0x0F	; 15
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	ef ec       	ldi	r30, 0xCF	; 207
     d7e:	f7 e0       	ldi	r31, 0x07	; 7
     d80:	31 97       	sbiw	r30, 0x01	; 1
     d82:	f1 f7       	brne	.-4      	; 0xd80 <spinup_motors+0x12>
     d84:	00 c0       	rjmp	.+0      	; 0xd86 <spinup_motors+0x18>
     d86:	00 00       	nop
     d88:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     d8a:	00 97       	sbiw	r24, 0x00	; 0
     d8c:	b9 f7       	brne	.-18     	; 0xd7c <spinup_motors+0xe>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
}
     d8e:	08 95       	ret

00000d90 <get_ambientlight>:

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     d90:	80 91 81 01 	lds	r24, 0x0181
     d94:	81 11       	cpse	r24, r1
     d96:	1e c0       	rjmp	.+60     	; 0xdd4 <get_ambientlight+0x44>
        cli();
     d98:	f8 94       	cli
        adc_setup_conversion(7);
     d9a:	87 e0       	ldi	r24, 0x07	; 7
     d9c:	80 93 7c 00 	sts	0x007C, r24
     da0:	83 e8       	ldi	r24, 0x83	; 131
     da2:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     da6:	80 91 7a 00 	lds	r24, 0x007A
     daa:	80 64       	ori	r24, 0x40	; 64
     dac:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     db0:	80 91 7a 00 	lds	r24, 0x007A
     db4:	86 fd       	sbrc	r24, 6
     db6:	fc cf       	rjmp	.-8      	; 0xdb0 <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     db8:	80 91 78 00 	lds	r24, 0x0078
     dbc:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     dc0:	10 92 7c 00 	sts	0x007C, r1
     dc4:	23 ea       	ldi	r18, 0xA3	; 163
     dc6:	20 93 7a 00 	sts	0x007A, r18
     dca:	21 e0       	ldi	r18, 0x01	; 1
     dcc:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     dd0:	78 94       	sei
     dd2:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     dd4:	8f ef       	ldi	r24, 0xFF	; 255
     dd6:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     dd8:	08 95       	ret

00000dda <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     dda:	80 91 81 01 	lds	r24, 0x0181
     dde:	81 11       	cpse	r24, r1
     de0:	1e c0       	rjmp	.+60     	; 0xe1e <get_temperature+0x44>
        cli();
     de2:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     de4:	88 ec       	ldi	r24, 0xC8	; 200
     de6:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     dea:	87 e8       	ldi	r24, 0x87	; 135
     dec:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     df0:	80 91 7a 00 	lds	r24, 0x007A
     df4:	80 64       	ori	r24, 0x40	; 64
     df6:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     dfa:	80 91 7a 00 	lds	r24, 0x007A
     dfe:	86 fd       	sbrc	r24, 6
     e00:	fc cf       	rjmp	.-8      	; 0xdfa <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     e02:	80 91 78 00 	lds	r24, 0x0078
     e06:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     e0a:	10 92 7c 00 	sts	0x007C, r1
     e0e:	23 ea       	ldi	r18, 0xA3	; 163
     e10:	20 93 7a 00 	sts	0x007A, r18
     e14:	21 e0       	ldi	r18, 0x01	; 1
     e16:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     e1a:	78 94       	sei
     e1c:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     e1e:	8f ef       	ldi	r24, 0xFF	; 255
     e20:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     e22:	08 95       	ret

00000e24 <rand_hard>:

uint8_t rand_hard() {
     e24:	1f 93       	push	r17
     e26:	cf 93       	push	r28
     e28:	df 93       	push	r29
     e2a:	60 e0       	ldi	r22, 0x00	; 0
     e2c:	70 e0       	ldi	r23, 0x00	; 0
    uint8_t num = 0;
     e2e:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     e30:	13 ea       	ldi	r17, 0xA3	; 163
     e32:	d1 e0       	ldi	r29, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     e34:	c6 e0       	ldi	r28, 0x06	; 6
     e36:	b3 e8       	ldi	r27, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     e38:	e1 e0       	ldi	r30, 0x01	; 1
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     e3c:	20 e8       	ldi	r18, 0x80	; 128
     e3e:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     e40:	f8 94       	cli
            adc_setup_conversion(6);
     e42:	c0 93 7c 00 	sts	0x007C, r28
     e46:	b0 93 7a 00 	sts	0x007A, r27
            adc_start_conversion();
     e4a:	90 91 7a 00 	lds	r25, 0x007A
     e4e:	90 64       	ori	r25, 0x40	; 64
     e50:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     e54:	90 91 7a 00 	lds	r25, 0x007A
     e58:	96 fd       	sbrc	r25, 6
     e5a:	fc cf       	rjmp	.-8      	; 0xe54 <rand_hard+0x30>
            a = ADCW&0x1;
     e5c:	40 91 78 00 	lds	r20, 0x0078
     e60:	50 91 79 00 	lds	r21, 0x0079
     e64:	a4 2f       	mov	r26, r20
     e66:	a1 70       	andi	r26, 0x01	; 1
            adc_start_conversion();
     e68:	90 91 7a 00 	lds	r25, 0x007A
     e6c:	90 64       	ori	r25, 0x40	; 64
     e6e:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     e72:	90 91 7a 00 	lds	r25, 0x007A
     e76:	96 fd       	sbrc	r25, 6
     e78:	fc cf       	rjmp	.-8      	; 0xe72 <rand_hard+0x4e>
            b = ADCW&0x1;
     e7a:	40 91 78 00 	lds	r20, 0x0078
     e7e:	50 91 79 00 	lds	r21, 0x0079
            adc_trigger_high_gain();
     e82:	10 92 7c 00 	sts	0x007C, r1
     e86:	10 93 7a 00 	sts	0x007A, r17
     e8a:	d0 93 7b 00 	sts	0x007B, r29
            sei();
     e8e:	78 94       	sei
            adc_start_conversion();
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
     e90:	41 70       	andi	r20, 0x01	; 1
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     e92:	a4 13       	cpse	r26, r20
     e94:	05 c0       	rjmp	.+10     	; 0xea0 <rand_hard+0x7c>
     e96:	21 50       	subi	r18, 0x01	; 1
     e98:	31 09       	sbc	r19, r1
     e9a:	21 15       	cp	r18, r1
     e9c:	31 05       	cpc	r19, r1
     e9e:	81 f6       	brne	.-96     	; 0xe40 <rand_hard+0x1c>
        if (a)
     ea0:	aa 23       	and	r26, r26
     ea2:	39 f0       	breq	.+14     	; 0xeb2 <rand_hard+0x8e>
            num |= (1<<i);
     ea4:	9f 01       	movw	r18, r30
     ea6:	06 2e       	mov	r0, r22
     ea8:	01 c0       	rjmp	.+2      	; 0xeac <rand_hard+0x88>
     eaa:	22 0f       	add	r18, r18
     eac:	0a 94       	dec	r0
     eae:	ea f7       	brpl	.-6      	; 0xeaa <rand_hard+0x86>
     eb0:	82 2b       	or	r24, r18
     eb2:	6f 5f       	subi	r22, 0xFF	; 255
     eb4:	7f 4f       	sbci	r23, 0xFF	; 255
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     eb6:	68 30       	cpi	r22, 0x08	; 8
     eb8:	71 05       	cpc	r23, r1
     eba:	09 f0       	breq	.+2      	; 0xebe <rand_hard+0x9a>
     ebc:	bf cf       	rjmp	.-130    	; 0xe3c <rand_hard+0x18>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     ebe:	df 91       	pop	r29
     ec0:	cf 91       	pop	r28
     ec2:	1f 91       	pop	r17
     ec4:	08 95       	ret

00000ec6 <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     ec6:	80 91 16 01 	lds	r24, 0x0116
     eca:	98 2f       	mov	r25, r24
     ecc:	99 0f       	add	r25, r25
     ece:	99 0f       	add	r25, r25
     ed0:	99 0f       	add	r25, r25
     ed2:	98 27       	eor	r25, r24
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     ed4:	80 91 3a 01 	lds	r24, 0x013A
     ed8:	21 e0       	ldi	r18, 0x01	; 1
     eda:	28 0f       	add	r18, r24
     edc:	20 93 3a 01 	sts	0x013A, r18
     ee0:	86 95       	lsr	r24
     ee2:	86 95       	lsr	r24

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
    seed ^= seed>>5;
     ee4:	89 27       	eor	r24, r25
     ee6:	92 95       	swap	r25
     ee8:	96 95       	lsr	r25
     eea:	97 70       	andi	r25, 0x07	; 7
    seed ^= accumulator++>>2;
     eec:	89 27       	eor	r24, r25
     eee:	80 93 16 01 	sts	0x0116, r24
    return seed;
}
     ef2:	08 95       	ret

00000ef4 <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     ef4:	80 93 16 01 	sts	0x0116, r24
     ef8:	08 95       	ret

00000efa <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     efa:	80 91 81 01 	lds	r24, 0x0181
     efe:	81 11       	cpse	r24, r1
     f00:	16 c0       	rjmp	.+44     	; 0xf2e <get_voltage+0x34>
        cli();                                    // disable interrupts
     f02:	f8 94       	cli
        adc_setup_conversion(6);
     f04:	86 e0       	ldi	r24, 0x06	; 6
     f06:	80 93 7c 00 	sts	0x007C, r24
     f0a:	83 e8       	ldi	r24, 0x83	; 131
     f0c:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     f10:	80 91 7a 00 	lds	r24, 0x007A
     f14:	80 64       	ori	r24, 0x40	; 64
     f16:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     f1a:	80 91 7a 00 	lds	r24, 0x007A
     f1e:	86 fd       	sbrc	r24, 6
     f20:	fc cf       	rjmp	.-8      	; 0xf1a <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     f22:	80 91 78 00 	lds	r24, 0x0078
     f26:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     f2a:	78 94       	sei
     f2c:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     f2e:	8f ef       	ldi	r24, 0xFF	; 255
     f30:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     f32:	08 95       	ret

00000f34 <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     f34:	2f 92       	push	r2
     f36:	3f 92       	push	r3
     f38:	4f 92       	push	r4
     f3a:	5f 92       	push	r5
     f3c:	6f 92       	push	r6
     f3e:	7f 92       	push	r7
     f40:	8f 92       	push	r8
     f42:	9f 92       	push	r9
     f44:	af 92       	push	r10
     f46:	bf 92       	push	r11
     f48:	cf 92       	push	r12
     f4a:	df 92       	push	r13
     f4c:	ef 92       	push	r14
     f4e:	ff 92       	push	r15
     f50:	0f 93       	push	r16
     f52:	1f 93       	push	r17
     f54:	cf 93       	push	r28
     f56:	df 93       	push	r29
     f58:	00 d0       	rcall	.+0      	; 0xf5a <estimate_distance+0x26>
     f5a:	00 d0       	rcall	.+0      	; 0xf5c <estimate_distance+0x28>
     f5c:	00 d0       	rcall	.+0      	; 0xf5e <estimate_distance+0x2a>
     f5e:	cd b7       	in	r28, 0x3d	; 61
     f60:	de b7       	in	r29, 0x3e	; 62
     f62:	8c 01       	movw	r16, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     f64:	dc 01       	movw	r26, r24
     f66:	12 96       	adiw	r26, 0x02	; 2
     f68:	0d 90       	ld	r0, X+
     f6a:	bc 91       	ld	r27, X
     f6c:	a0 2d       	mov	r26, r0
     f6e:	be 83       	std	Y+6, r27	; 0x06
     f70:	ad 83       	std	Y+5, r26	; 0x05
     f72:	a4 38       	cpi	r26, 0x84	; 132
     f74:	e3 e0       	ldi	r30, 0x03	; 3
     f76:	be 07       	cpc	r27, r30
     f78:	0c f0       	brlt	.+2      	; 0xf7c <estimate_distance+0x48>
     f7a:	ca c0       	rjmp	.+404    	; 0x1110 <estimate_distance+0x1dc>
        if (dist->high_gain > kilo_irhigh[0]) {
     f7c:	80 91 5b 01 	lds	r24, 0x015B
     f80:	90 91 5c 01 	lds	r25, 0x015C
     f84:	8a 17       	cp	r24, r26
     f86:	9b 07       	cpc	r25, r27
     f88:	08 f4       	brcc	.+2      	; 0xf8c <estimate_distance+0x58>
     f8a:	a9 c1       	rjmp	.+850    	; 0x12de <estimate_distance+0x3aa>
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     f8c:	60 90 5d 01 	lds	r6, 0x015D
     f90:	70 90 5e 01 	lds	r7, 0x015E
     f94:	6a 16       	cp	r6, r26
     f96:	7b 06       	cpc	r7, r27
     f98:	08 f4       	brcc	.+2      	; 0xf9c <estimate_distance+0x68>
     f9a:	27 c2       	rjmp	.+1102   	; 0x13ea <estimate_distance+0x4b6>
     f9c:	60 90 5f 01 	lds	r6, 0x015F
     fa0:	70 90 60 01 	lds	r7, 0x0160
     fa4:	6a 16       	cp	r6, r26
     fa6:	7b 06       	cpc	r7, r27
     fa8:	08 f4       	brcc	.+2      	; 0xfac <estimate_distance+0x78>
     faa:	28 c2       	rjmp	.+1104   	; 0x13fc <estimate_distance+0x4c8>
     fac:	60 90 61 01 	lds	r6, 0x0161
     fb0:	70 90 62 01 	lds	r7, 0x0162
     fb4:	6a 16       	cp	r6, r26
     fb6:	7b 06       	cpc	r7, r27
     fb8:	08 f4       	brcc	.+2      	; 0xfbc <estimate_distance+0x88>
     fba:	29 c2       	rjmp	.+1106   	; 0x140e <estimate_distance+0x4da>
     fbc:	60 90 63 01 	lds	r6, 0x0163
     fc0:	70 90 64 01 	lds	r7, 0x0164
     fc4:	6a 16       	cp	r6, r26
     fc6:	7b 06       	cpc	r7, r27
     fc8:	08 f4       	brcc	.+2      	; 0xfcc <estimate_distance+0x98>
     fca:	2a c2       	rjmp	.+1108   	; 0x1420 <estimate_distance+0x4ec>
     fcc:	60 90 65 01 	lds	r6, 0x0165
     fd0:	70 90 66 01 	lds	r7, 0x0166
     fd4:	6a 16       	cp	r6, r26
     fd6:	7b 06       	cpc	r7, r27
     fd8:	08 f4       	brcc	.+2      	; 0xfdc <estimate_distance+0xa8>
     fda:	8b c1       	rjmp	.+790    	; 0x12f2 <estimate_distance+0x3be>
     fdc:	60 90 67 01 	lds	r6, 0x0167
     fe0:	70 90 68 01 	lds	r7, 0x0168
     fe4:	6a 16       	cp	r6, r26
     fe6:	7b 06       	cpc	r7, r27
     fe8:	08 f4       	brcc	.+2      	; 0xfec <estimate_distance+0xb8>
     fea:	23 c2       	rjmp	.+1094   	; 0x1432 <estimate_distance+0x4fe>
     fec:	60 90 69 01 	lds	r6, 0x0169
     ff0:	70 90 6a 01 	lds	r7, 0x016A
     ff4:	6a 16       	cp	r6, r26
     ff6:	7b 06       	cpc	r7, r27
     ff8:	08 f4       	brcc	.+2      	; 0xffc <estimate_distance+0xc8>
     ffa:	24 c2       	rjmp	.+1096   	; 0x1444 <estimate_distance+0x510>
     ffc:	60 90 6b 01 	lds	r6, 0x016B
    1000:	70 90 6c 01 	lds	r7, 0x016C
    1004:	6a 16       	cp	r6, r26
    1006:	7b 06       	cpc	r7, r27
    1008:	08 f4       	brcc	.+2      	; 0x100c <estimate_distance+0xd8>
    100a:	25 c2       	rjmp	.+1098   	; 0x1456 <estimate_distance+0x522>
    100c:	60 90 6d 01 	lds	r6, 0x016D
    1010:	70 90 6e 01 	lds	r7, 0x016E
    1014:	6a 16       	cp	r6, r26
    1016:	7b 06       	cpc	r7, r27
    1018:	08 f4       	brcc	.+2      	; 0x101c <estimate_distance+0xe8>
    101a:	26 c2       	rjmp	.+1100   	; 0x1468 <estimate_distance+0x534>
    101c:	60 90 6f 01 	lds	r6, 0x016F
    1020:	70 90 70 01 	lds	r7, 0x0170
    1024:	6a 16       	cp	r6, r26
    1026:	7b 06       	cpc	r7, r27
    1028:	08 f4       	brcc	.+2      	; 0x102c <estimate_distance+0xf8>
    102a:	27 c2       	rjmp	.+1102   	; 0x147a <estimate_distance+0x546>
    102c:	60 90 71 01 	lds	r6, 0x0171
    1030:	70 90 72 01 	lds	r7, 0x0172
    1034:	6a 16       	cp	r6, r26
    1036:	7b 06       	cpc	r7, r27
    1038:	08 f4       	brcc	.+2      	; 0x103c <estimate_distance+0x108>
    103a:	2d c2       	rjmp	.+1114   	; 0x1496 <estimate_distance+0x562>
    103c:	60 90 73 01 	lds	r6, 0x0173
    1040:	70 90 74 01 	lds	r7, 0x0174
    1044:	6a 16       	cp	r6, r26
    1046:	7b 06       	cpc	r7, r27
    1048:	08 f4       	brcc	.+2      	; 0x104c <estimate_distance+0x118>
    104a:	2e c2       	rjmp	.+1116   	; 0x14a8 <estimate_distance+0x574>
    104c:	60 90 75 01 	lds	r6, 0x0175
    1050:	70 90 76 01 	lds	r7, 0x0176
    1054:	6a 16       	cp	r6, r26
    1056:	7b 06       	cpc	r7, r27
    1058:	08 f4       	brcc	.+2      	; 0x105c <estimate_distance+0x128>
    105a:	2f c2       	rjmp	.+1118   	; 0x14ba <estimate_distance+0x586>
    105c:	80 e0       	ldi	r24, 0x00	; 0
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	a0 ed       	ldi	r26, 0xD0	; 208
    1062:	b0 e4       	ldi	r27, 0x40	; 64
    1064:	89 83       	std	Y+1, r24	; 0x01
    1066:	9a 83       	std	Y+2, r25	; 0x02
    1068:	ab 83       	std	Y+3, r26	; 0x03
    106a:	bc 83       	std	Y+4, r27	; 0x04
    106c:	8c e0       	ldi	r24, 0x0C	; 12
    106e:	e8 2e       	mov	r14, r24
    1070:	f1 2c       	mov	r15, r1
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
    1072:	f7 01       	movw	r30, r14
    1074:	ee 0f       	add	r30, r30
    1076:	ff 1f       	adc	r31, r31
    1078:	e5 5a       	subi	r30, 0xA5	; 165
    107a:	fe 4f       	sbci	r31, 0xFE	; 254
    107c:	80 81       	ld	r24, Z
    107e:	91 81       	ldd	r25, Z+1	; 0x01
    1080:	b3 01       	movw	r22, r6
    1082:	68 1b       	sub	r22, r24
    1084:	79 0b       	sbc	r23, r25
    1086:	80 e0       	ldi	r24, 0x00	; 0
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <__floatunsisf>
    108e:	9b 01       	movw	r18, r22
    1090:	ac 01       	movw	r20, r24
    1092:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <__addsf3>
    1096:	6b 01       	movw	r12, r22
    1098:	7c 01       	movw	r14, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
    109a:	ad 81       	ldd	r26, Y+5	; 0x05
    109c:	be 81       	ldd	r27, Y+6	; 0x06
    109e:	bd 01       	movw	r22, r26
    10a0:	88 27       	eor	r24, r24
    10a2:	77 fd       	sbrc	r23, 7
    10a4:	80 95       	com	r24
    10a6:	98 2f       	mov	r25, r24
    10a8:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <__floatsisf>
    10ac:	4b 01       	movw	r8, r22
    10ae:	5c 01       	movw	r10, r24
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
    10b0:	b3 01       	movw	r22, r6
    10b2:	80 e0       	ldi	r24, 0x00	; 0
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <__floatunsisf>
    10ba:	2b 01       	movw	r4, r22
    10bc:	3c 01       	movw	r6, r24
    10be:	29 81       	ldd	r18, Y+1	; 0x01
    10c0:	3a 81       	ldd	r19, Y+2	; 0x02
    10c2:	4b 81       	ldd	r20, Y+3	; 0x03
    10c4:	5c 81       	ldd	r21, Y+4	; 0x04
    10c6:	c7 01       	movw	r24, r14
    10c8:	b6 01       	movw	r22, r12
    10ca:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__mulsf3>
    10ce:	9b 01       	movw	r18, r22
    10d0:	ac 01       	movw	r20, r24
    10d2:	c3 01       	movw	r24, r6
    10d4:	b2 01       	movw	r22, r4
    10d6:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <__subsf3>
    10da:	9b 01       	movw	r18, r22
    10dc:	ac 01       	movw	r20, r24
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
    10de:	c5 01       	movw	r24, r10
    10e0:	b4 01       	movw	r22, r8
    10e2:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <__subsf3>
    10e6:	20 e0       	ldi	r18, 0x00	; 0
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	40 e2       	ldi	r20, 0x20	; 32
    10ec:	51 e4       	ldi	r21, 0x41	; 65
    10ee:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__mulsf3>
            b=((int)((int)b/(int)slope));
    10f2:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <__fixsfsi>
    10f6:	5b 01       	movw	r10, r22
    10f8:	c7 01       	movw	r24, r14
    10fa:	b6 01       	movw	r22, r12
    10fc:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <__fixsfsi>
    1100:	ab 01       	movw	r20, r22
    1102:	bc 01       	movw	r22, r24
    1104:	c5 01       	movw	r24, r10
    1106:	ba 01       	movw	r22, r20
    1108:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <__divmodhi4>
            dist_high=b;
    110c:	76 2e       	mov	r7, r22
    110e:	e8 c0       	rjmp	.+464    	; 0x12e0 <estimate_distance+0x3ac>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    1110:	77 24       	eor	r7, r7
    1112:	7a 94       	dec	r7
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
    1114:	d8 01       	movw	r26, r16
    1116:	ad 90       	ld	r10, X+
    1118:	bc 90       	ld	r11, X
    111a:	80 91 82 01 	lds	r24, 0x0182
    111e:	90 91 83 01 	lds	r25, 0x0183
    1122:	8a 15       	cp	r24, r10
    1124:	9b 05       	cpc	r25, r11
    1126:	08 f4       	brcc	.+2      	; 0x112a <estimate_distance+0x1f6>
    1128:	6f c0       	rjmp	.+222    	; 0x1208 <estimate_distance+0x2d4>
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
    112a:	00 91 84 01 	lds	r16, 0x0184
    112e:	10 91 85 01 	lds	r17, 0x0185
    1132:	0a 15       	cp	r16, r10
    1134:	1b 05       	cpc	r17, r11
    1136:	08 f4       	brcc	.+2      	; 0x113a <estimate_distance+0x206>
    1138:	5c c1       	rjmp	.+696    	; 0x13f2 <estimate_distance+0x4be>
    113a:	00 91 86 01 	lds	r16, 0x0186
    113e:	10 91 87 01 	lds	r17, 0x0187
    1142:	0a 15       	cp	r16, r10
    1144:	1b 05       	cpc	r17, r11
    1146:	08 f4       	brcc	.+2      	; 0x114a <estimate_distance+0x216>
    1148:	5d c1       	rjmp	.+698    	; 0x1404 <estimate_distance+0x4d0>
    114a:	00 91 88 01 	lds	r16, 0x0188
    114e:	10 91 89 01 	lds	r17, 0x0189
    1152:	0a 15       	cp	r16, r10
    1154:	1b 05       	cpc	r17, r11
    1156:	08 f4       	brcc	.+2      	; 0x115a <estimate_distance+0x226>
    1158:	5e c1       	rjmp	.+700    	; 0x1416 <estimate_distance+0x4e2>
    115a:	00 91 8a 01 	lds	r16, 0x018A
    115e:	10 91 8b 01 	lds	r17, 0x018B
    1162:	0a 15       	cp	r16, r10
    1164:	1b 05       	cpc	r17, r11
    1166:	08 f4       	brcc	.+2      	; 0x116a <estimate_distance+0x236>
    1168:	5f c1       	rjmp	.+702    	; 0x1428 <estimate_distance+0x4f4>
    116a:	00 91 8c 01 	lds	r16, 0x018C
    116e:	10 91 8d 01 	lds	r17, 0x018D
    1172:	0a 15       	cp	r16, r10
    1174:	1b 05       	cpc	r17, r11
    1176:	08 f4       	brcc	.+2      	; 0x117a <estimate_distance+0x246>
    1178:	d8 c0       	rjmp	.+432    	; 0x132a <estimate_distance+0x3f6>
    117a:	00 91 8e 01 	lds	r16, 0x018E
    117e:	10 91 8f 01 	lds	r17, 0x018F
    1182:	0a 15       	cp	r16, r10
    1184:	1b 05       	cpc	r17, r11
    1186:	08 f4       	brcc	.+2      	; 0x118a <estimate_distance+0x256>
    1188:	58 c1       	rjmp	.+688    	; 0x143a <estimate_distance+0x506>
    118a:	00 91 90 01 	lds	r16, 0x0190
    118e:	10 91 91 01 	lds	r17, 0x0191
    1192:	0a 15       	cp	r16, r10
    1194:	1b 05       	cpc	r17, r11
    1196:	08 f4       	brcc	.+2      	; 0x119a <estimate_distance+0x266>
    1198:	59 c1       	rjmp	.+690    	; 0x144c <estimate_distance+0x518>
    119a:	00 91 92 01 	lds	r16, 0x0192
    119e:	10 91 93 01 	lds	r17, 0x0193
    11a2:	0a 15       	cp	r16, r10
    11a4:	1b 05       	cpc	r17, r11
    11a6:	08 f4       	brcc	.+2      	; 0x11aa <estimate_distance+0x276>
    11a8:	5a c1       	rjmp	.+692    	; 0x145e <estimate_distance+0x52a>
    11aa:	00 91 94 01 	lds	r16, 0x0194
    11ae:	10 91 95 01 	lds	r17, 0x0195
    11b2:	0a 15       	cp	r16, r10
    11b4:	1b 05       	cpc	r17, r11
    11b6:	08 f4       	brcc	.+2      	; 0x11ba <estimate_distance+0x286>
    11b8:	5b c1       	rjmp	.+694    	; 0x1470 <estimate_distance+0x53c>
    11ba:	00 91 96 01 	lds	r16, 0x0196
    11be:	10 91 97 01 	lds	r17, 0x0197
    11c2:	0a 15       	cp	r16, r10
    11c4:	1b 05       	cpc	r17, r11
    11c6:	08 f4       	brcc	.+2      	; 0x11ca <estimate_distance+0x296>
    11c8:	5c c1       	rjmp	.+696    	; 0x1482 <estimate_distance+0x54e>
    11ca:	00 91 98 01 	lds	r16, 0x0198
    11ce:	10 91 99 01 	lds	r17, 0x0199
    11d2:	0a 15       	cp	r16, r10
    11d4:	1b 05       	cpc	r17, r11
    11d6:	08 f4       	brcc	.+2      	; 0x11da <estimate_distance+0x2a6>
    11d8:	59 c1       	rjmp	.+690    	; 0x148c <estimate_distance+0x558>
    11da:	00 91 9a 01 	lds	r16, 0x019A
    11de:	10 91 9b 01 	lds	r17, 0x019B
    11e2:	0a 15       	cp	r16, r10
    11e4:	1b 05       	cpc	r17, r11
    11e6:	08 f4       	brcc	.+2      	; 0x11ea <estimate_distance+0x2b6>
    11e8:	5a c1       	rjmp	.+692    	; 0x149e <estimate_distance+0x56a>
    11ea:	00 91 9c 01 	lds	r16, 0x019C
    11ee:	10 91 9d 01 	lds	r17, 0x019D
    11f2:	0a 15       	cp	r16, r10
    11f4:	1b 05       	cpc	r17, r11
    11f6:	08 f4       	brcc	.+2      	; 0x11fa <estimate_distance+0x2c6>
    11f8:	5b c1       	rjmp	.+694    	; 0x14b0 <estimate_distance+0x57c>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
    11fa:	1a e5       	ldi	r17, 0x5A	; 90
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
    11fc:	bf ef       	ldi	r27, 0xFF	; 255
    11fe:	7b 12       	cpse	r7, r27
    1200:	07 c0       	rjmp	.+14     	; 0x1210 <estimate_distance+0x2dc>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
    1202:	81 e2       	ldi	r24, 0x21	; 33
    1204:	81 0f       	add	r24, r17
    1206:	52 c0       	rjmp	.+164    	; 0x12ac <estimate_distance+0x378>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
    1208:	10 e0       	ldi	r17, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
    120a:	bf ef       	ldi	r27, 0xFF	; 255
    120c:	7b 16       	cp	r7, r27
    120e:	c9 f3       	breq	.-14     	; 0x1202 <estimate_distance+0x2ce>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
    1210:	ed 81       	ldd	r30, Y+5	; 0x05
    1212:	fe 81       	ldd	r31, Y+6	; 0x06
    1214:	bf 01       	movw	r22, r30
    1216:	88 27       	eor	r24, r24
    1218:	77 fd       	sbrc	r23, 7
    121a:	80 95       	com	r24
    121c:	98 2f       	mov	r25, r24
    121e:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <__floatsisf>
    1222:	6b 01       	movw	r12, r22
    1224:	7c 01       	movw	r14, r24
    1226:	67 2d       	mov	r22, r7
    1228:	70 e0       	ldi	r23, 0x00	; 0
    122a:	80 e0       	ldi	r24, 0x00	; 0
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <__floatunsisf>
    1232:	4b 01       	movw	r8, r22
    1234:	5c 01       	movw	r10, r24
    1236:	a7 01       	movw	r20, r14
    1238:	96 01       	movw	r18, r12
    123a:	60 e0       	ldi	r22, 0x00	; 0
    123c:	70 e0       	ldi	r23, 0x00	; 0
    123e:	81 e6       	ldi	r24, 0x61	; 97
    1240:	94 e4       	ldi	r25, 0x44	; 68
    1242:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <__subsf3>
    1246:	9b 01       	movw	r18, r22
    1248:	ac 01       	movw	r20, r24
    124a:	c5 01       	movw	r24, r10
    124c:	b4 01       	movw	r22, r8
    124e:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__mulsf3>
    1252:	4b 01       	movw	r8, r22
    1254:	5c 01       	movw	r10, r24
    1256:	61 2f       	mov	r22, r17
    1258:	70 e0       	ldi	r23, 0x00	; 0
    125a:	80 e0       	ldi	r24, 0x00	; 0
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <__floatunsisf>
    1262:	2b 01       	movw	r4, r22
    1264:	3c 01       	movw	r6, r24
    1266:	20 e0       	ldi	r18, 0x00	; 0
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	4f e2       	ldi	r20, 0x2F	; 47
    126c:	54 e4       	ldi	r21, 0x44	; 68
    126e:	c7 01       	movw	r24, r14
    1270:	b6 01       	movw	r22, r12
    1272:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <__subsf3>
    1276:	9b 01       	movw	r18, r22
    1278:	ac 01       	movw	r20, r24
    127a:	c3 01       	movw	r24, r6
    127c:	b2 01       	movw	r22, r4
    127e:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__mulsf3>
    1282:	9b 01       	movw	r18, r22
    1284:	ac 01       	movw	r20, r24
    1286:	c5 01       	movw	r24, r10
    1288:	b4 01       	movw	r22, r8
    128a:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <__addsf3>
    128e:	20 e0       	ldi	r18, 0x00	; 0
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	48 e4       	ldi	r20, 0x48	; 72
    1294:	53 e4       	ldi	r21, 0x43	; 67
    1296:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <__divsf3>
    129a:	20 e0       	ldi	r18, 0x00	; 0
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	44 e0       	ldi	r20, 0x04	; 4
    12a0:	52 e4       	ldi	r21, 0x42	; 66
    12a2:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <__addsf3>
    12a6:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <__fixunssfsi>
    12aa:	86 2f       	mov	r24, r22
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
    }
}
    12ac:	26 96       	adiw	r28, 0x06	; 6
    12ae:	0f b6       	in	r0, 0x3f	; 63
    12b0:	f8 94       	cli
    12b2:	de bf       	out	0x3e, r29	; 62
    12b4:	0f be       	out	0x3f, r0	; 63
    12b6:	cd bf       	out	0x3d, r28	; 61
    12b8:	df 91       	pop	r29
    12ba:	cf 91       	pop	r28
    12bc:	1f 91       	pop	r17
    12be:	0f 91       	pop	r16
    12c0:	ff 90       	pop	r15
    12c2:	ef 90       	pop	r14
    12c4:	df 90       	pop	r13
    12c6:	cf 90       	pop	r12
    12c8:	bf 90       	pop	r11
    12ca:	af 90       	pop	r10
    12cc:	9f 90       	pop	r9
    12ce:	8f 90       	pop	r8
    12d0:	7f 90       	pop	r7
    12d2:	6f 90       	pop	r6
    12d4:	5f 90       	pop	r5
    12d6:	4f 90       	pop	r4
    12d8:	3f 90       	pop	r3
    12da:	2f 90       	pop	r2
    12dc:	08 95       	ret
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
    12de:	71 2c       	mov	r7, r1
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
    12e0:	ed 81       	ldd	r30, Y+5	; 0x05
    12e2:	fe 81       	ldd	r31, Y+6	; 0x06
    12e4:	ed 3b       	cpi	r30, 0xBD	; 189
    12e6:	f2 40       	sbci	r31, 0x02	; 2
    12e8:	0c f0       	brlt	.+2      	; 0x12ec <estimate_distance+0x3b8>
    12ea:	14 cf       	rjmp	.-472    	; 0x1114 <estimate_distance+0x1e0>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
    12ec:	81 e2       	ldi	r24, 0x21	; 33
    12ee:	87 0d       	add	r24, r7
    12f0:	dd cf       	rjmp	.-70     	; 0x12ac <estimate_distance+0x378>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    12f2:	65 e0       	ldi	r22, 0x05	; 5
                if (dist->high_gain > kilo_irhigh[i]) {
    12f4:	85 e0       	ldi	r24, 0x05	; 5
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	7c 01       	movw	r14, r24
    12fa:	f1 e0       	ldi	r31, 0x01	; 1
    12fc:	ef 1a       	sub	r14, r31
    12fe:	f1 08       	sbc	r15, r1
    1300:	70 e0       	ldi	r23, 0x00	; 0
    1302:	80 e0       	ldi	r24, 0x00	; 0
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <__floatunsisf>
    130a:	20 e0       	ldi	r18, 0x00	; 0
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	40 e0       	ldi	r20, 0x00	; 0
    1310:	5f e3       	ldi	r21, 0x3F	; 63
    1312:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__mulsf3>
    1316:	20 e0       	ldi	r18, 0x00	; 0
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	a9 01       	movw	r20, r18
    131c:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <__addsf3>
    1320:	69 83       	std	Y+1, r22	; 0x01
    1322:	7a 83       	std	Y+2, r23	; 0x02
    1324:	8b 83       	std	Y+3, r24	; 0x03
    1326:	9c 83       	std	Y+4, r25	; 0x04
    1328:	a4 ce       	rjmp	.-696    	; 0x1072 <estimate_distance+0x13e>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    132a:	75 e0       	ldi	r23, 0x05	; 5
    132c:	67 2e       	mov	r6, r23
                if(dist->low_gain > kilo_irlow[i]) {
    132e:	e5 e0       	ldi	r30, 0x05	; 5
    1330:	f0 e0       	ldi	r31, 0x00	; 0
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
    1332:	ee 0f       	add	r30, r30
    1334:	ff 1f       	adc	r31, r31
    1336:	e0 58       	subi	r30, 0x80	; 128
    1338:	fe 4f       	sbci	r31, 0xFE	; 254
    133a:	80 81       	ld	r24, Z
    133c:	91 81       	ldd	r25, Z+1	; 0x01
    133e:	b8 01       	movw	r22, r16
    1340:	68 1b       	sub	r22, r24
    1342:	79 0b       	sbc	r23, r25
    1344:	80 e0       	ldi	r24, 0x00	; 0
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <__floatunsisf>
    134c:	9b 01       	movw	r18, r22
    134e:	ac 01       	movw	r20, r24
    1350:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <__addsf3>
    1354:	6b 01       	movw	r12, r22
    1356:	7c 01       	movw	r14, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
    1358:	b5 01       	movw	r22, r10
    135a:	88 27       	eor	r24, r24
    135c:	77 fd       	sbrc	r23, 7
    135e:	80 95       	com	r24
    1360:	98 2f       	mov	r25, r24
    1362:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <__floatsisf>
    1366:	4b 01       	movw	r8, r22
    1368:	5c 01       	movw	r10, r24

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
    136a:	b8 01       	movw	r22, r16
    136c:	80 e0       	ldi	r24, 0x00	; 0
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <__floatunsisf>
    1374:	1b 01       	movw	r2, r22
    1376:	2c 01       	movw	r4, r24
    1378:	66 2d       	mov	r22, r6
    137a:	70 e0       	ldi	r23, 0x00	; 0
    137c:	80 e0       	ldi	r24, 0x00	; 0
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <__floatunsisf>
    1384:	20 e0       	ldi	r18, 0x00	; 0
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	40 e0       	ldi	r20, 0x00	; 0
    138a:	5f e3       	ldi	r21, 0x3F	; 63
    138c:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__mulsf3>
    1390:	20 e0       	ldi	r18, 0x00	; 0
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	a9 01       	movw	r20, r18
    1396:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <__addsf3>
    139a:	a7 01       	movw	r20, r14
    139c:	96 01       	movw	r18, r12
    139e:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__mulsf3>
    13a2:	9b 01       	movw	r18, r22
    13a4:	ac 01       	movw	r20, r24
    13a6:	c2 01       	movw	r24, r4
    13a8:	b1 01       	movw	r22, r2
    13aa:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <__subsf3>
    13ae:	9b 01       	movw	r18, r22
    13b0:	ac 01       	movw	r20, r24
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
    13b2:	c5 01       	movw	r24, r10
    13b4:	b4 01       	movw	r22, r8
    13b6:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <__subsf3>
    13ba:	20 e0       	ldi	r18, 0x00	; 0
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	40 e2       	ldi	r20, 0x20	; 32
    13c0:	51 e4       	ldi	r21, 0x41	; 65
    13c2:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__mulsf3>
                b=((int)((int)b/(int)slope));
    13c6:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <__fixsfsi>
    13ca:	8b 01       	movw	r16, r22
    13cc:	c7 01       	movw	r24, r14
    13ce:	b6 01       	movw	r22, r12
    13d0:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <__fixsfsi>
    13d4:	ab 01       	movw	r20, r22
    13d6:	bc 01       	movw	r22, r24
    13d8:	c8 01       	movw	r24, r16
    13da:	ba 01       	movw	r22, r20
    13dc:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <__divmodhi4>
                dist_low=b;
    13e0:	16 2f       	mov	r17, r22
            }
        }
    }

    if (dist_low != 255) {
    13e2:	6f 3f       	cpi	r22, 0xFF	; 255
    13e4:	09 f0       	breq	.+2      	; 0x13e8 <estimate_distance+0x4b4>
    13e6:	11 cf       	rjmp	.-478    	; 0x120a <estimate_distance+0x2d6>
    13e8:	81 cf       	rjmp	.-254    	; 0x12ec <estimate_distance+0x3b8>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
    13ea:	61 e0       	ldi	r22, 0x01	; 1
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	83 cf       	rjmp	.-250    	; 0x12f8 <estimate_distance+0x3c4>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
    13f2:	66 24       	eor	r6, r6
    13f4:	63 94       	inc	r6
    13f6:	e1 e0       	ldi	r30, 0x01	; 1
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	9b cf       	rjmp	.-202    	; 0x1332 <estimate_distance+0x3fe>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    13fc:	62 e0       	ldi	r22, 0x02	; 2
                if (dist->high_gain > kilo_irhigh[i]) {
    13fe:	82 e0       	ldi	r24, 0x02	; 2
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	7a cf       	rjmp	.-268    	; 0x12f8 <estimate_distance+0x3c4>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1404:	a2 e0       	ldi	r26, 0x02	; 2
    1406:	6a 2e       	mov	r6, r26
                if(dist->low_gain > kilo_irlow[i]) {
    1408:	e2 e0       	ldi	r30, 0x02	; 2
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	92 cf       	rjmp	.-220    	; 0x1332 <estimate_distance+0x3fe>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    140e:	63 e0       	ldi	r22, 0x03	; 3
                if (dist->high_gain > kilo_irhigh[i]) {
    1410:	83 e0       	ldi	r24, 0x03	; 3
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	71 cf       	rjmp	.-286    	; 0x12f8 <estimate_distance+0x3c4>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1416:	f3 e0       	ldi	r31, 0x03	; 3
    1418:	6f 2e       	mov	r6, r31
                if(dist->low_gain > kilo_irlow[i]) {
    141a:	e3 e0       	ldi	r30, 0x03	; 3
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	89 cf       	rjmp	.-238    	; 0x1332 <estimate_distance+0x3fe>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1420:	64 e0       	ldi	r22, 0x04	; 4
                if (dist->high_gain > kilo_irhigh[i]) {
    1422:	84 e0       	ldi	r24, 0x04	; 4
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	68 cf       	rjmp	.-304    	; 0x12f8 <estimate_distance+0x3c4>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1428:	e4 e0       	ldi	r30, 0x04	; 4
    142a:	6e 2e       	mov	r6, r30
                if(dist->low_gain > kilo_irlow[i]) {
    142c:	e4 e0       	ldi	r30, 0x04	; 4
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	80 cf       	rjmp	.-256    	; 0x1332 <estimate_distance+0x3fe>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1432:	66 e0       	ldi	r22, 0x06	; 6
                if (dist->high_gain > kilo_irhigh[i]) {
    1434:	86 e0       	ldi	r24, 0x06	; 6
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	5f cf       	rjmp	.-322    	; 0x12f8 <estimate_distance+0x3c4>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    143a:	66 e0       	ldi	r22, 0x06	; 6
    143c:	66 2e       	mov	r6, r22
                if(dist->low_gain > kilo_irlow[i]) {
    143e:	e6 e0       	ldi	r30, 0x06	; 6
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	77 cf       	rjmp	.-274    	; 0x1332 <estimate_distance+0x3fe>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1444:	67 e0       	ldi	r22, 0x07	; 7
                if (dist->high_gain > kilo_irhigh[i]) {
    1446:	87 e0       	ldi	r24, 0x07	; 7
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	56 cf       	rjmp	.-340    	; 0x12f8 <estimate_distance+0x3c4>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    144c:	57 e0       	ldi	r21, 0x07	; 7
    144e:	65 2e       	mov	r6, r21
                if(dist->low_gain > kilo_irlow[i]) {
    1450:	e7 e0       	ldi	r30, 0x07	; 7
    1452:	f0 e0       	ldi	r31, 0x00	; 0
    1454:	6e cf       	rjmp	.-292    	; 0x1332 <estimate_distance+0x3fe>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1456:	68 e0       	ldi	r22, 0x08	; 8
                if (dist->high_gain > kilo_irhigh[i]) {
    1458:	88 e0       	ldi	r24, 0x08	; 8
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	4d cf       	rjmp	.-358    	; 0x12f8 <estimate_distance+0x3c4>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    145e:	48 e0       	ldi	r20, 0x08	; 8
    1460:	64 2e       	mov	r6, r20
                if(dist->low_gain > kilo_irlow[i]) {
    1462:	e8 e0       	ldi	r30, 0x08	; 8
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	65 cf       	rjmp	.-310    	; 0x1332 <estimate_distance+0x3fe>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1468:	69 e0       	ldi	r22, 0x09	; 9
                if (dist->high_gain > kilo_irhigh[i]) {
    146a:	89 e0       	ldi	r24, 0x09	; 9
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	44 cf       	rjmp	.-376    	; 0x12f8 <estimate_distance+0x3c4>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1470:	39 e0       	ldi	r19, 0x09	; 9
    1472:	63 2e       	mov	r6, r19
                if(dist->low_gain > kilo_irlow[i]) {
    1474:	e9 e0       	ldi	r30, 0x09	; 9
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	5c cf       	rjmp	.-328    	; 0x1332 <estimate_distance+0x3fe>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    147a:	6a e0       	ldi	r22, 0x0A	; 10
                if (dist->high_gain > kilo_irhigh[i]) {
    147c:	8a e0       	ldi	r24, 0x0A	; 10
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	3b cf       	rjmp	.-394    	; 0x12f8 <estimate_distance+0x3c4>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1482:	2a e0       	ldi	r18, 0x0A	; 10
    1484:	62 2e       	mov	r6, r18
                if(dist->low_gain > kilo_irlow[i]) {
    1486:	ea e0       	ldi	r30, 0x0A	; 10
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	53 cf       	rjmp	.-346    	; 0x1332 <estimate_distance+0x3fe>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    148c:	9b e0       	ldi	r25, 0x0B	; 11
    148e:	69 2e       	mov	r6, r25
                if(dist->low_gain > kilo_irlow[i]) {
    1490:	eb e0       	ldi	r30, 0x0B	; 11
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	4e cf       	rjmp	.-356    	; 0x1332 <estimate_distance+0x3fe>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1496:	6b e0       	ldi	r22, 0x0B	; 11
                if (dist->high_gain > kilo_irhigh[i]) {
    1498:	8b e0       	ldi	r24, 0x0B	; 11
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	2d cf       	rjmp	.-422    	; 0x12f8 <estimate_distance+0x3c4>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    149e:	8c e0       	ldi	r24, 0x0C	; 12
    14a0:	68 2e       	mov	r6, r24
                if(dist->low_gain > kilo_irlow[i]) {
    14a2:	ec e0       	ldi	r30, 0x0C	; 12
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	45 cf       	rjmp	.-374    	; 0x1332 <estimate_distance+0x3fe>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    14a8:	6c e0       	ldi	r22, 0x0C	; 12
                if (dist->high_gain > kilo_irhigh[i]) {
    14aa:	8c e0       	ldi	r24, 0x0C	; 12
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	24 cf       	rjmp	.-440    	; 0x12f8 <estimate_distance+0x3c4>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    14b0:	bd e0       	ldi	r27, 0x0D	; 13
    14b2:	6b 2e       	mov	r6, r27
                if(dist->low_gain > kilo_irlow[i]) {
    14b4:	ed e0       	ldi	r30, 0x0D	; 13
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	3c cf       	rjmp	.-392    	; 0x1332 <estimate_distance+0x3fe>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    14ba:	6d e0       	ldi	r22, 0x0D	; 13
                if (dist->high_gain > kilo_irhigh[i]) {
    14bc:	8d e0       	ldi	r24, 0x0D	; 13
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	1b cf       	rjmp	.-458    	; 0x12f8 <estimate_distance+0x3c4>

000014c2 <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
    14c2:	1f 92       	push	r1
    14c4:	0f 92       	push	r0
    14c6:	0f b6       	in	r0, 0x3f	; 63
    14c8:	0f 92       	push	r0
    14ca:	11 24       	eor	r1, r1
    14cc:	2f 93       	push	r18
    14ce:	3f 93       	push	r19
    14d0:	4f 93       	push	r20
    14d2:	5f 93       	push	r21
    14d4:	6f 93       	push	r22
    14d6:	7f 93       	push	r23
    14d8:	8f 93       	push	r24
    14da:	9f 93       	push	r25
    14dc:	af 93       	push	r26
    14de:	bf 93       	push	r27
    14e0:	ef 93       	push	r30
    14e2:	ff 93       	push	r31
    tx_clock += tx_increment;
    14e4:	80 91 a1 01 	lds	r24, 0x01A1
    14e8:	90 91 a2 01 	lds	r25, 0x01A2
    14ec:	20 91 9f 01 	lds	r18, 0x019F
    14f0:	30 91 a0 01 	lds	r19, 0x01A0
    14f4:	82 0f       	add	r24, r18
    14f6:	93 1f       	adc	r25, r19
    14f8:	90 93 a2 01 	sts	0x01A2, r25
    14fc:	80 93 a1 01 	sts	0x01A1, r24
    tx_increment = 0xFF;
    1500:	8f ef       	ldi	r24, 0xFF	; 255
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	90 93 a0 01 	sts	0x01A0, r25
    1508:	80 93 9f 01 	sts	0x019F, r24
    OCR0A = tx_increment;
    150c:	8f ef       	ldi	r24, 0xFF	; 255
    150e:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
    1510:	80 91 7d 01 	lds	r24, 0x017D
    1514:	90 91 7e 01 	lds	r25, 0x017E
    1518:	a0 91 7f 01 	lds	r26, 0x017F
    151c:	b0 91 80 01 	lds	r27, 0x0180
    1520:	01 96       	adiw	r24, 0x01	; 1
    1522:	a1 1d       	adc	r26, r1
    1524:	b1 1d       	adc	r27, r1
    1526:	80 93 7d 01 	sts	0x017D, r24
    152a:	90 93 7e 01 	sts	0x017E, r25
    152e:	a0 93 7f 01 	sts	0x017F, r26
    1532:	b0 93 80 01 	sts	0x0180, r27

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
    1536:	80 91 81 01 	lds	r24, 0x0181
    153a:	81 11       	cpse	r24, r1
    153c:	0f c0       	rjmp	.+30     	; 0x155c <__vector_14+0x9a>
    153e:	80 91 b0 01 	lds	r24, 0x01B0
    1542:	90 91 b1 01 	lds	r25, 0x01B1
    1546:	20 91 a1 01 	lds	r18, 0x01A1
    154a:	30 91 a2 01 	lds	r19, 0x01A2
    154e:	82 17       	cp	r24, r18
    1550:	93 07       	cpc	r25, r19
    1552:	20 f4       	brcc	.+8      	; 0x155c <__vector_14+0x9a>
    1554:	80 91 3d 01 	lds	r24, 0x013D
    1558:	84 30       	cpi	r24, 0x04	; 4
    155a:	89 f0       	breq	.+34     	; 0x157e <__vector_14+0xbc>
                tx_increment = rand()&0xFF;
                OCR0A = tx_increment;
            }
        }
    }
}
    155c:	ff 91       	pop	r31
    155e:	ef 91       	pop	r30
    1560:	bf 91       	pop	r27
    1562:	af 91       	pop	r26
    1564:	9f 91       	pop	r25
    1566:	8f 91       	pop	r24
    1568:	7f 91       	pop	r23
    156a:	6f 91       	pop	r22
    156c:	5f 91       	pop	r21
    156e:	4f 91       	pop	r20
    1570:	3f 91       	pop	r19
    1572:	2f 91       	pop	r18
    1574:	0f 90       	pop	r0
    1576:	0f be       	out	0x3f, r0	; 63
    1578:	0f 90       	pop	r0
    157a:	1f 90       	pop	r1
    157c:	18 95       	reti
    tx_increment = 0xFF;
    OCR0A = tx_increment;
    kilo_ticks++;

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
    157e:	e0 91 19 01 	lds	r30, 0x0119
    1582:	f0 91 1a 01 	lds	r31, 0x011A
    1586:	09 95       	icall
        if (msg) {
    1588:	00 97       	sbiw	r24, 0x00	; 0
    158a:	41 f3       	breq	.-48     	; 0x155c <__vector_14+0x9a>
            if (message_send(msg)) {
    158c:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <message_send>
    1590:	81 11       	cpse	r24, r1
    1592:	09 c0       	rjmp	.+18     	; 0x15a6 <__vector_14+0xe4>
                kilo_message_tx_success();
                tx_clock = 0;
            } else {
                tx_increment = rand()&0xFF;
    1594:	0e 94 c1 01 	call	0x382	; 0x382 <rand>
    1598:	99 27       	eor	r25, r25
    159a:	90 93 a0 01 	sts	0x01A0, r25
    159e:	80 93 9f 01 	sts	0x019F, r24
                OCR0A = tx_increment;
    15a2:	87 bd       	out	0x27, r24	; 39
    15a4:	db cf       	rjmp	.-74     	; 0x155c <__vector_14+0x9a>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
        if (msg) {
            if (message_send(msg)) {
                kilo_message_tx_success();
    15a6:	e0 91 17 01 	lds	r30, 0x0117
    15aa:	f0 91 18 01 	lds	r31, 0x0118
    15ae:	09 95       	icall
                tx_clock = 0;
    15b0:	10 92 a2 01 	sts	0x01A2, r1
    15b4:	10 92 a1 01 	sts	0x01A1, r1
    15b8:	d1 cf       	rjmp	.-94     	; 0x155c <__vector_14+0x9a>

000015ba <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
    15ba:	80 ff       	sbrs	r24, 0
    15bc:	11 c0       	rjmp	.+34     	; 0x15e0 <set_color+0x26>
        DDRD |= (1<<5);
    15be:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
    15c0:	81 ff       	sbrs	r24, 1
    15c2:	11 c0       	rjmp	.+34     	; 0x15e6 <set_color+0x2c>
        DDRD |= (1<<4);
    15c4:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
    15c6:	82 ff       	sbrs	r24, 2
    15c8:	11 c0       	rjmp	.+34     	; 0x15ec <set_color+0x32>
        DDRC |= (1<<3);
    15ca:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
    15cc:	83 ff       	sbrs	r24, 3
    15ce:	11 c0       	rjmp	.+34     	; 0x15f2 <set_color+0x38>
        DDRC |= (1<<2);
    15d0:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
    15d2:	84 ff       	sbrs	r24, 4
    15d4:	11 c0       	rjmp	.+34     	; 0x15f8 <set_color+0x3e>
        DDRC |= (1<<5);
    15d6:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
    15d8:	85 fd       	sbrc	r24, 5
    15da:	11 c0       	rjmp	.+34     	; 0x15fe <set_color+0x44>
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    15dc:	3c 98       	cbi	0x07, 4	; 7
    15de:	08 95       	ret

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    15e0:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
    15e2:	81 fd       	sbrc	r24, 1
    15e4:	ef cf       	rjmp	.-34     	; 0x15c4 <set_color+0xa>
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    15e6:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
    15e8:	82 fd       	sbrc	r24, 2
    15ea:	ef cf       	rjmp	.-34     	; 0x15ca <set_color+0x10>
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    15ec:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
    15ee:	83 fd       	sbrc	r24, 3
    15f0:	ef cf       	rjmp	.-34     	; 0x15d0 <set_color+0x16>
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    15f2:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
    15f4:	84 fd       	sbrc	r24, 4
    15f6:	ef cf       	rjmp	.-34     	; 0x15d6 <set_color+0x1c>
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    15f8:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
    15fa:	85 ff       	sbrs	r24, 5
    15fc:	ef cf       	rjmp	.-34     	; 0x15dc <set_color+0x22>
        DDRC |= (1<<4);
    15fe:	3c 9a       	sbi	0x07, 4	; 7
    1600:	08 95       	ret

00001602 <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
    1602:	1f 92       	push	r1
    1604:	0f 92       	push	r0
    1606:	0f b6       	in	r0, 0x3f	; 63
    1608:	0f 92       	push	r0
    160a:	11 24       	eor	r1, r1
    160c:	8f 93       	push	r24
    160e:	9f 93       	push	r25
    rx_timer_off();
    1610:	10 92 81 00 	sts	0x0081, r1
    1614:	10 92 85 00 	sts	0x0085, r1
    1618:	10 92 84 00 	sts	0x0084, r1
    rx_leadingbit = 1;
    161c:	81 e0       	ldi	r24, 0x01	; 1
    161e:	80 93 5a 01 	sts	0x015A, r24
    rx_leadingbyte = 1;
    1622:	80 93 9e 01 	sts	0x019E, r24
    rx_busy = 0;
    1626:	10 92 81 01 	sts	0x0181, r1
    adc_trigger_high_gain();
    162a:	10 92 7c 00 	sts	0x007C, r1
    162e:	93 ea       	ldi	r25, 0xA3	; 163
    1630:	90 93 7a 00 	sts	0x007A, r25
    1634:	80 93 7b 00 	sts	0x007B, r24
}
    1638:	9f 91       	pop	r25
    163a:	8f 91       	pop	r24
    163c:	0f 90       	pop	r0
    163e:	0f be       	out	0x3f, r0	; 63
    1640:	0f 90       	pop	r0
    1642:	1f 90       	pop	r1
    1644:	18 95       	reti

00001646 <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
    1646:	1f 92       	push	r1
    1648:	0f 92       	push	r0
    164a:	0f b6       	in	r0, 0x3f	; 63
    164c:	0f 92       	push	r0
    164e:	11 24       	eor	r1, r1
    1650:	2f 93       	push	r18
    1652:	3f 93       	push	r19
    1654:	4f 93       	push	r20
    1656:	5f 93       	push	r21
    1658:	6f 93       	push	r22
    165a:	7f 93       	push	r23
    165c:	8f 93       	push	r24
    165e:	9f 93       	push	r25
    1660:	af 93       	push	r26
    1662:	bf 93       	push	r27
    1664:	cf 93       	push	r28
    1666:	df 93       	push	r29
    1668:	ef 93       	push	r30
    166a:	ff 93       	push	r31
    uint16_t timer = TCNT1;
    166c:	20 91 84 00 	lds	r18, 0x0084
    1670:	30 91 85 00 	lds	r19, 0x0085

    rx_busy = 1;
    1674:	41 e0       	ldi	r20, 0x01	; 1
    1676:	40 93 81 01 	sts	0x0181, r20
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
    167a:	80 91 5a 01 	lds	r24, 0x015A
    167e:	88 23       	and	r24, r24
    1680:	a9 f1       	breq	.+106    	; 0x16ec <__vector_23+0xa6>
        rx_timer_on();
    1682:	10 92 85 00 	sts	0x0085, r1
    1686:	10 92 84 00 	sts	0x0084, r1
    168a:	40 93 81 00 	sts	0x0081, r20
        rx_bytevalue = 0;
    168e:	10 92 b2 01 	sts	0x01B2, r1
        rx_leadingbit = 0;
    1692:	10 92 5a 01 	sts	0x015A, r1
        if (rx_leadingbyte) {
    1696:	80 91 9e 01 	lds	r24, 0x019E
    169a:	88 23       	and	r24, r24
    169c:	a1 f0       	breq	.+40     	; 0x16c6 <__vector_23+0x80>
            adc_finish_conversion();
    169e:	80 91 7a 00 	lds	r24, 0x007A
    16a2:	86 fd       	sbrc	r24, 6
    16a4:	fc cf       	rjmp	.-8      	; 0x169e <__vector_23+0x58>
            rx_dist.high_gain = ADCW;
    16a6:	80 91 78 00 	lds	r24, 0x0078
    16aa:	90 91 79 00 	lds	r25, 0x0079
    16ae:	90 93 7c 01 	sts	0x017C, r25
    16b2:	80 93 7b 01 	sts	0x017B, r24
            adc_trigger_low_gain();
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	80 93 7c 00 	sts	0x007C, r24
    16bc:	93 ea       	ldi	r25, 0xA3	; 163
    16be:	90 93 7a 00 	sts	0x007A, r25
    16c2:	80 93 7b 00 	sts	0x007B, r24
                    }
                }
            }
        }
    }
}
    16c6:	ff 91       	pop	r31
    16c8:	ef 91       	pop	r30
    16ca:	df 91       	pop	r29
    16cc:	cf 91       	pop	r28
    16ce:	bf 91       	pop	r27
    16d0:	af 91       	pop	r26
    16d2:	9f 91       	pop	r25
    16d4:	8f 91       	pop	r24
    16d6:	7f 91       	pop	r23
    16d8:	6f 91       	pop	r22
    16da:	5f 91       	pop	r21
    16dc:	4f 91       	pop	r20
    16de:	3f 91       	pop	r19
    16e0:	2f 91       	pop	r18
    16e2:	0f 90       	pop	r0
    16e4:	0f be       	out	0x3f, r0	; 63
    16e6:	0f 90       	pop	r0
    16e8:	1f 90       	pop	r1
    16ea:	18 95       	reti
            rx_dist.high_gain = ADCW;
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
    16ec:	c9 01       	movw	r24, r18
    16ee:	87 58       	subi	r24, 0x87	; 135
    16f0:	91 09       	sbc	r25, r1
    16f2:	84 37       	cpi	r24, 0x74	; 116
    16f4:	99 40       	sbci	r25, 0x09	; 9
    16f6:	08 f0       	brcs	.+2      	; 0x16fa <__vector_23+0xb4>
    16f8:	4f c0       	rjmp	.+158    	; 0x1798 <__vector_23+0x152>
            adc_trigger_high_gain();
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
    16fa:	26 58       	subi	r18, 0x86	; 134
    16fc:	31 09       	sbc	r19, r1
    16fe:	a4 ef       	ldi	r26, 0xF4	; 244
    1700:	b0 e0       	ldi	r27, 0x00	; 0
    1702:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <__umulhisi3>
    1706:	aa 27       	eor	r26, r26
    1708:	bb 27       	eor	r27, r27
            if (bitindex <= 7) { // Data bit received.
    170a:	88 30       	cpi	r24, 0x08	; 8
    170c:	08 f4       	brcc	.+2      	; 0x1710 <__vector_23+0xca>
    170e:	7b c0       	rjmp	.+246    	; 0x1806 <__vector_23+0x1c0>
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
    1710:	40 93 5a 01 	sts	0x015A, r20
                if (rx_leadingbyte) {
    1714:	80 91 9e 01 	lds	r24, 0x019E
    1718:	81 11       	cpse	r24, r1
    171a:	52 c0       	rjmp	.+164    	; 0x17c0 <__vector_23+0x17a>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
                        rx_byteindex = 0;
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
    171c:	80 91 78 01 	lds	r24, 0x0178
    1720:	e8 2f       	mov	r30, r24
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	ec 55       	subi	r30, 0x5C	; 92
    1726:	fe 4f       	sbci	r31, 0xFE	; 254
    1728:	90 91 b2 01 	lds	r25, 0x01B2
    172c:	90 83       	st	Z, r25
                    rx_byteindex++;
    172e:	8f 5f       	subi	r24, 0xFF	; 255
    1730:	80 93 78 01 	sts	0x0178, r24
                    if (rx_byteindex == sizeof(message_t)) {
    1734:	8c 30       	cpi	r24, 0x0C	; 12
    1736:	39 f6       	brne	.-114    	; 0x16c6 <__vector_23+0x80>
                        rx_timer_off();
    1738:	10 92 81 00 	sts	0x0081, r1
    173c:	10 92 85 00 	sts	0x0085, r1
    1740:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    1744:	40 93 9e 01 	sts	0x019E, r20
                        rx_busy = 0;
    1748:	10 92 81 01 	sts	0x0181, r1

                        if (rx_msg.crc == message_crc(&rx_msg))
    174c:	c0 91 ae 01 	lds	r28, 0x01AE
    1750:	d0 91 af 01 	lds	r29, 0x01AF
    1754:	84 ea       	ldi	r24, 0xA4	; 164
    1756:	91 e0       	ldi	r25, 0x01	; 1
    1758:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <message_crc>
    175c:	c8 17       	cp	r28, r24
    175e:	d9 07       	cpc	r29, r25
    1760:	09 f0       	breq	.+2      	; 0x1764 <__vector_23+0x11e>
    1762:	b1 cf       	rjmp	.-158    	; 0x16c6 <__vector_23+0x80>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
    1764:	80 91 ad 01 	lds	r24, 0x01AD
    1768:	87 ff       	sbrs	r24, 7
    176a:	5e c0       	rjmp	.+188    	; 0x1828 <__vector_23+0x1e2>
        kilo_message_rx(&rx_msg, &rx_dist);
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
    176c:	98 e7       	ldi	r25, 0x78	; 120
    176e:	98 0f       	add	r25, r24
    1770:	93 30       	cpi	r25, 0x03	; 3
    1772:	30 f0       	brcs	.+12     	; 0x1780 <__vector_23+0x13a>
        motors_off();
    1774:	53 98       	cbi	0x0a, 3	; 10
    1776:	23 98       	cbi	0x04, 3	; 4
    1778:	10 92 b4 00 	sts	0x00B4, r1
    177c:	10 92 b3 00 	sts	0x00B3, r1
    switch (rx_msg.type) {
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	fc 01       	movw	r30, r24
    1784:	e0 58       	subi	r30, 0x80	; 128
    1786:	f1 09       	sbc	r31, r1
    1788:	eb 30       	cpi	r30, 0x0B	; 11
    178a:	f1 05       	cpc	r31, r1
    178c:	08 f0       	brcs	.+2      	; 0x1790 <__vector_23+0x14a>
    178e:	9b cf       	rjmp	.-202    	; 0x16c6 <__vector_23+0x80>
    1790:	e5 5c       	subi	r30, 0xC5	; 197
    1792:	ff 4f       	sbci	r31, 0xFF	; 255
    1794:	0c 94 ed 0d 	jmp	0x1bda	; 0x1bda <__tablejump2__>
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
            rx_timer_off();
    1798:	10 92 81 00 	sts	0x0081, r1
    179c:	10 92 85 00 	sts	0x0085, r1
    17a0:	10 92 84 00 	sts	0x0084, r1
            rx_leadingbit = 1;
    17a4:	40 93 5a 01 	sts	0x015A, r20
            rx_leadingbyte = 1;
    17a8:	40 93 9e 01 	sts	0x019E, r20
            rx_busy = 0;
    17ac:	10 92 81 01 	sts	0x0181, r1
            adc_trigger_high_gain();
    17b0:	10 92 7c 00 	sts	0x007C, r1
    17b4:	83 ea       	ldi	r24, 0xA3	; 163
    17b6:	80 93 7a 00 	sts	0x007A, r24
    17ba:	40 93 7b 00 	sts	0x007B, r20
    17be:	83 cf       	rjmp	.-250    	; 0x16c6 <__vector_23+0x80>
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
                if (rx_leadingbyte) {
                    adc_finish_conversion();
    17c0:	80 91 7a 00 	lds	r24, 0x007A
    17c4:	86 fd       	sbrc	r24, 6
    17c6:	fc cf       	rjmp	.-8      	; 0x17c0 <__vector_23+0x17a>
                    rx_dist.low_gain = ADCW;
    17c8:	80 91 78 00 	lds	r24, 0x0078
    17cc:	90 91 79 00 	lds	r25, 0x0079
    17d0:	90 93 7a 01 	sts	0x017A, r25
    17d4:	80 93 79 01 	sts	0x0179, r24
                    adc_trigger_high_gain();
    17d8:	10 92 7c 00 	sts	0x007C, r1
    17dc:	83 ea       	ldi	r24, 0xA3	; 163
    17de:	80 93 7a 00 	sts	0x007A, r24
    17e2:	81 e0       	ldi	r24, 0x01	; 1
    17e4:	80 93 7b 00 	sts	0x007B, r24
                    if (rx_bytevalue != 0) { // Collision detected.
    17e8:	90 91 b2 01 	lds	r25, 0x01B2
    17ec:	99 23       	and	r25, r25
    17ee:	b9 f0       	breq	.+46     	; 0x181e <__vector_23+0x1d8>
                        rx_timer_off();
    17f0:	10 92 81 00 	sts	0x0081, r1
    17f4:	10 92 85 00 	sts	0x0085, r1
    17f8:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    17fc:	80 93 9e 01 	sts	0x019E, r24
                        rx_busy = 0;
    1800:	10 92 81 01 	sts	0x0181, r1
    1804:	60 cf       	rjmp	.-320    	; 0x16c6 <__vector_23+0x80>
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
    1806:	21 e0       	ldi	r18, 0x01	; 1
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	01 c0       	rjmp	.+2      	; 0x180e <__vector_23+0x1c8>
    180c:	22 0f       	add	r18, r18
    180e:	8a 95       	dec	r24
    1810:	ea f7       	brpl	.-6      	; 0x180c <__vector_23+0x1c6>
    1812:	80 91 b2 01 	lds	r24, 0x01B2
    1816:	82 2b       	or	r24, r18
    1818:	80 93 b2 01 	sts	0x01B2, r24
    181c:	54 cf       	rjmp	.-344    	; 0x16c6 <__vector_23+0x80>
                    if (rx_bytevalue != 0) { // Collision detected.
                        rx_timer_off();
                        rx_leadingbyte = 1;
                        rx_busy = 0;
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
    181e:	10 92 9e 01 	sts	0x019E, r1
                        rx_byteindex = 0;
    1822:	10 92 78 01 	sts	0x0178, r1
    1826:	4f cf       	rjmp	.-354    	; 0x16c6 <__vector_23+0x80>

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
        kilo_message_rx(&rx_msg, &rx_dist);
    1828:	e0 91 1b 01 	lds	r30, 0x011B
    182c:	f0 91 1c 01 	lds	r31, 0x011C
    1830:	69 e7       	ldi	r22, 0x79	; 121
    1832:	71 e0       	ldi	r23, 0x01	; 1
    1834:	84 ea       	ldi	r24, 0xA4	; 164
    1836:	91 e0       	ldi	r25, 0x01	; 1
    1838:	09 95       	icall
    183a:	45 cf       	rjmp	.-374    	; 0x16c6 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    183c:	80 91 a4 01 	lds	r24, 0x01A4
    1840:	82 30       	cpi	r24, 0x02	; 2
    1842:	09 f4       	brne	.+2      	; 0x1846 <__vector_23+0x200>
    1844:	dc c0       	rjmp	.+440    	; 0x19fe <__vector_23+0x3b8>
    1846:	08 f4       	brcc	.+2      	; 0x184a <__vector_23+0x204>
    1848:	b9 c0       	rjmp	.+370    	; 0x19bc <__vector_23+0x376>
    184a:	83 30       	cpi	r24, 0x03	; 3
    184c:	09 f4       	brne	.+2      	; 0x1850 <__vector_23+0x20a>
    184e:	c5 c0       	rjmp	.+394    	; 0x19da <__vector_23+0x394>
    1850:	84 30       	cpi	r24, 0x04	; 4
    1852:	09 f0       	breq	.+2      	; 0x1856 <__vector_23+0x210>
    1854:	b0 c0       	rjmp	.+352    	; 0x19b6 <__vector_23+0x370>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    1856:	80 91 3b 01 	lds	r24, 0x013B
    185a:	90 91 aa 01 	lds	r25, 0x01AA
    185e:	83 30       	cpi	r24, 0x03	; 3
    1860:	09 f4       	brne	.+2      	; 0x1864 <__vector_23+0x21e>
    1862:	e2 c0       	rjmp	.+452    	; 0x1a28 <__vector_23+0x3e2>
    1864:	80 91 a9 01 	lds	r24, 0x01A9
                        prev_motion = MOVE_STOP;
    1868:	10 92 3c 01 	sts	0x013C, r1
                        cur_motion = MOVE_STRAIGHT;
    186c:	23 e0       	ldi	r18, 0x03	; 3
    186e:	20 93 3b 01 	sts	0x013B, r18
                        kilo_straight_left = calibmsg->straight_left;
    1872:	80 93 b5 01 	sts	0x01B5, r24
                        kilo_straight_right = calibmsg->straight_right;
    1876:	90 93 b6 01 	sts	0x01B6, r25
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    187a:	80 91 3d 01 	lds	r24, 0x013D
    187e:	86 30       	cpi	r24, 0x06	; 6
    1880:	09 f4       	brne	.+2      	; 0x1884 <__vector_23+0x23e>
    1882:	21 cf       	rjmp	.-446    	; 0x16c6 <__vector_23+0x80>
                motors_on();
    1884:	53 9a       	sbi	0x0a, 3	; 10
    1886:	23 9a       	sbi	0x04, 3	; 4
    1888:	10 92 b4 00 	sts	0x00B4, r1
    188c:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = MOVING;
    1890:	86 e0       	ldi	r24, 0x06	; 6
    1892:	80 93 3d 01 	sts	0x013D, r24
    1896:	17 cf       	rjmp	.-466    	; 0x16c6 <__vector_23+0x80>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    1898:	80 91 3d 01 	lds	r24, 0x013D
    189c:	86 30       	cpi	r24, 0x06	; 6
    189e:	99 f0       	breq	.+38     	; 0x18c6 <__vector_23+0x280>
                motors_on();
    18a0:	53 9a       	sbi	0x0a, 3	; 10
    18a2:	23 9a       	sbi	0x04, 3	; 4
    18a4:	10 92 b4 00 	sts	0x00B4, r1
    18a8:	10 92 b3 00 	sts	0x00B3, r1

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    18ac:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    18ae:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    18b0:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    18b2:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    18b4:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    18b6:	3c 98       	cbi	0x07, 4	; 7
            break;
        case READUID:
            if (kilo_state != MOVING) {
                motors_on();
                set_color(RGB(0,0,0));
                prev_motion = cur_motion = MOVE_STOP;
    18b8:	10 92 3b 01 	sts	0x013B, r1
    18bc:	10 92 3c 01 	sts	0x013C, r1
                kilo_state = MOVING;
    18c0:	86 e0       	ldi	r24, 0x06	; 6
    18c2:	80 93 3d 01 	sts	0x013D, r24
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    18c6:	81 e0       	ldi	r24, 0x01	; 1
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	00 90 a4 01 	lds	r0, 0x01A4
    18ce:	02 c0       	rjmp	.+4      	; 0x18d4 <__vector_23+0x28e>
    18d0:	88 0f       	add	r24, r24
    18d2:	99 1f       	adc	r25, r25
    18d4:	0a 94       	dec	r0
    18d6:	e2 f7       	brpl	.-8      	; 0x18d0 <__vector_23+0x28a>
    18d8:	20 91 b3 01 	lds	r18, 0x01B3
    18dc:	30 91 b4 01 	lds	r19, 0x01B4
    18e0:	82 23       	and	r24, r18
    18e2:	93 23       	and	r25, r19
    18e4:	89 2b       	or	r24, r25
    18e6:	09 f0       	breq	.+2      	; 0x18ea <__vector_23+0x2a4>
    18e8:	86 c0       	rjmp	.+268    	; 0x19f6 <__vector_23+0x3b0>
                cur_motion = MOVE_LEFT;
            else
                cur_motion = MOVE_STOP;
    18ea:	10 92 3b 01 	sts	0x013B, r1
    18ee:	eb ce       	rjmp	.-554    	; 0x16c6 <__vector_23+0x80>
            break;
        case SLEEP:
            kilo_state = SLEEPING;
            break;
        case WAKEUP:
            kilo_state = IDLE;
    18f0:	81 e0       	ldi	r24, 0x01	; 1
    18f2:	80 93 3d 01 	sts	0x013D, r24
    18f6:	e7 ce       	rjmp	.-562    	; 0x16c6 <__vector_23+0x80>
        case BOOT:
            tx_timer_off();
            bootload();
            break;
        case RESET:
            reset();
    18f8:	e0 e0       	ldi	r30, 0x00	; 0
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	09 95       	icall
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
        motors_off();
    switch (rx_msg.type) {
        case BOOT:
            tx_timer_off();
    18fe:	80 91 6e 00 	lds	r24, 0x006E
    1902:	8d 7f       	andi	r24, 0xFD	; 253
    1904:	80 93 6e 00 	sts	0x006E, r24
    1908:	16 bc       	out	0x26, r1	; 38
            bootload();
    190a:	e0 e0       	ldi	r30, 0x00	; 0
    190c:	f0 e7       	ldi	r31, 0x70	; 112
    190e:	09 95       	icall
            break;
        case RESET:
            reset();
            break;
        case SLEEP:
            kilo_state = SLEEPING;
    1910:	10 92 3d 01 	sts	0x013D, r1
    1914:	d8 ce       	rjmp	.-592    	; 0x16c6 <__vector_23+0x80>
            break;
        case CHARGE:
            kilo_state = CHARGING;
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
    1916:	82 e0       	ldi	r24, 0x02	; 2
    1918:	80 93 3d 01 	sts	0x013D, r24
    191c:	d4 ce       	rjmp	.-600    	; 0x16c6 <__vector_23+0x80>
            break;
        case WAKEUP:
            kilo_state = IDLE;
            break;
        case CHARGE:
            kilo_state = CHARGING;
    191e:	85 e0       	ldi	r24, 0x05	; 5
    1920:	80 93 3d 01 	sts	0x013D, r24
    1924:	d0 ce       	rjmp	.-608    	; 0x16c6 <__vector_23+0x80>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
    1926:	80 91 3d 01 	lds	r24, 0x013D
    192a:	83 30       	cpi	r24, 0x03	; 3
    192c:	09 f4       	brne	.+2      	; 0x1930 <__vector_23+0x2ea>
    192e:	cb ce       	rjmp	.-618    	; 0x16c6 <__vector_23+0x80>
    1930:	80 91 3d 01 	lds	r24, 0x013D
    1934:	84 30       	cpi	r24, 0x04	; 4
    1936:	09 f4       	brne	.+2      	; 0x193a <__vector_23+0x2f4>
    1938:	c6 ce       	rjmp	.-628    	; 0x16c6 <__vector_23+0x80>
                motors_on();
    193a:	53 9a       	sbi	0x0a, 3	; 10
    193c:	23 9a       	sbi	0x04, 3	; 4
    193e:	10 92 b4 00 	sts	0x00B4, r1
    1942:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = SETUP;
    1946:	83 e0       	ldi	r24, 0x03	; 3
    1948:	80 93 3d 01 	sts	0x013D, r24
    194c:	bc ce       	rjmp	.-648    	; 0x16c6 <__vector_23+0x80>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
    194e:	80 91 3d 01 	lds	r24, 0x013D
    1952:	86 30       	cpi	r24, 0x06	; 6
    1954:	09 f0       	breq	.+2      	; 0x1958 <__vector_23+0x312>
    1956:	b7 ce       	rjmp	.-658    	; 0x16c6 <__vector_23+0x80>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
    1958:	60 91 b3 01 	lds	r22, 0x01B3
    195c:	80 eb       	ldi	r24, 0xB0	; 176
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	0e 94 35 10 	call	0x206a	; 0x206a <__eewr_byte_m328p>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
    1964:	60 91 b4 01 	lds	r22, 0x01B4
    1968:	81 eb       	ldi	r24, 0xB1	; 177
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	0e 94 35 10 	call	0x206a	; 0x206a <__eewr_byte_m328p>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
    1970:	60 91 b7 01 	lds	r22, 0x01B7
    1974:	85 e0       	ldi	r24, 0x05	; 5
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	0e 94 35 10 	call	0x206a	; 0x206a <__eewr_byte_m328p>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
    197c:	60 91 a3 01 	lds	r22, 0x01A3
    1980:	89 e0       	ldi	r24, 0x09	; 9
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	0e 94 35 10 	call	0x206a	; 0x206a <__eewr_byte_m328p>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
    1988:	60 91 b5 01 	lds	r22, 0x01B5
    198c:	8c e0       	ldi	r24, 0x0C	; 12
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	0e 94 35 10 	call	0x206a	; 0x206a <__eewr_byte_m328p>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
    1994:	60 91 b6 01 	lds	r22, 0x01B6
    1998:	84 e1       	ldi	r24, 0x14	; 20
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	0e 94 35 10 	call	0x206a	; 0x206a <__eewr_byte_m328p>
                        motors_off();
    19a0:	53 98       	cbi	0x0a, 3	; 10
    19a2:	23 98       	cbi	0x04, 3	; 4
    19a4:	10 92 b4 00 	sts	0x00B4, r1
    19a8:	10 92 b3 00 	sts	0x00B3, r1
                        kilo_state = IDLE;
    19ac:	81 e0       	ldi	r24, 0x01	; 1
    19ae:	80 93 3d 01 	sts	0x013D, r24
    19b2:	80 91 a4 01 	lds	r24, 0x01A4
                        kilo_straight_left = calibmsg->straight_left;
                        kilo_straight_right = calibmsg->straight_right;
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    19b6:	81 11       	cpse	r24, r1
    19b8:	60 cf       	rjmp	.-320    	; 0x187a <__vector_23+0x234>
    19ba:	85 ce       	rjmp	.-758    	; 0x16c6 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    19bc:	88 23       	and	r24, r24
    19be:	39 f2       	breq	.-114    	; 0x194e <__vector_23+0x308>
    19c0:	81 30       	cpi	r24, 0x01	; 1
    19c2:	c9 f7       	brne	.-14     	; 0x19b6 <__vector_23+0x370>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
    19c4:	80 91 a5 01 	lds	r24, 0x01A5
    19c8:	90 91 a6 01 	lds	r25, 0x01A6
    19cc:	90 93 b4 01 	sts	0x01B4, r25
    19d0:	80 93 b3 01 	sts	0x01B3, r24
                    cur_motion = MOVE_STOP;
    19d4:	10 92 3b 01 	sts	0x013B, r1
    19d8:	50 cf       	rjmp	.-352    	; 0x187a <__vector_23+0x234>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    19da:	80 91 3b 01 	lds	r24, 0x013B
    19de:	82 30       	cpi	r24, 0x02	; 2
    19e0:	71 f1       	breq	.+92     	; 0x1a3e <__vector_23+0x3f8>
    19e2:	80 91 a8 01 	lds	r24, 0x01A8
                        prev_motion = MOVE_STOP;
    19e6:	10 92 3c 01 	sts	0x013C, r1
                        cur_motion = MOVE_RIGHT;
    19ea:	92 e0       	ldi	r25, 0x02	; 2
    19ec:	90 93 3b 01 	sts	0x013B, r25
                        kilo_turn_right = calibmsg->turn_right;
    19f0:	80 93 a3 01 	sts	0x01A3, r24
    19f4:	42 cf       	rjmp	.-380    	; 0x187a <__vector_23+0x234>
                prev_motion = cur_motion = MOVE_STOP;
                kilo_state = MOVING;
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
                cur_motion = MOVE_LEFT;
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	80 93 3b 01 	sts	0x013B, r24
    19fc:	64 ce       	rjmp	.-824    	; 0x16c6 <__vector_23+0x80>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    19fe:	80 91 3b 01 	lds	r24, 0x013B
    1a02:	81 30       	cpi	r24, 0x01	; 1
    1a04:	51 f0       	breq	.+20     	; 0x1a1a <__vector_23+0x3d4>
    1a06:	80 91 a7 01 	lds	r24, 0x01A7
                        prev_motion = MOVE_STOP;
    1a0a:	10 92 3c 01 	sts	0x013C, r1
                        cur_motion = MOVE_LEFT;
    1a0e:	91 e0       	ldi	r25, 0x01	; 1
    1a10:	90 93 3b 01 	sts	0x013B, r25
                        kilo_turn_left = calibmsg->turn_left;
    1a14:	80 93 b7 01 	sts	0x01B7, r24
    1a18:	30 cf       	rjmp	.-416    	; 0x187a <__vector_23+0x234>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    1a1a:	80 91 a7 01 	lds	r24, 0x01A7
    1a1e:	90 91 b7 01 	lds	r25, 0x01B7
    1a22:	89 13       	cpse	r24, r25
    1a24:	f2 cf       	rjmp	.-28     	; 0x1a0a <__vector_23+0x3c4>
    1a26:	29 cf       	rjmp	.-430    	; 0x187a <__vector_23+0x234>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    1a28:	80 91 b6 01 	lds	r24, 0x01B6
    1a2c:	98 13       	cpse	r25, r24
    1a2e:	1a cf       	rjmp	.-460    	; 0x1864 <__vector_23+0x21e>
    1a30:	80 91 a9 01 	lds	r24, 0x01A9
    1a34:	20 91 b5 01 	lds	r18, 0x01B5
    1a38:	82 13       	cpse	r24, r18
    1a3a:	16 cf       	rjmp	.-468    	; 0x1868 <__vector_23+0x222>
    1a3c:	1e cf       	rjmp	.-452    	; 0x187a <__vector_23+0x234>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    1a3e:	80 91 a8 01 	lds	r24, 0x01A8
    1a42:	90 91 a3 01 	lds	r25, 0x01A3
    1a46:	89 13       	cpse	r24, r25
    1a48:	ce cf       	rjmp	.-100    	; 0x19e6 <__vector_23+0x3a0>
    1a4a:	17 cf       	rjmp	.-466    	; 0x187a <__vector_23+0x234>

00001a4c <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    1a4c:	fc 01       	movw	r30, r24
    1a4e:	2a e0       	ldi	r18, 0x0A	; 10
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    1a50:	8f ef       	ldi	r24, 0xFF	; 255
    1a52:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    1a54:	31 91       	ld	r19, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    1a56:	83 27       	eor	r24, r19
    1a58:	08 2e       	mov	r0, r24
    1a5a:	82 95       	swap	r24
    1a5c:	80 7f       	andi	r24, 0xF0	; 240
    1a5e:	80 25       	eor	r24, r0
    1a60:	09 2e       	mov	r0, r25
    1a62:	98 2f       	mov	r25, r24
    1a64:	82 95       	swap	r24
    1a66:	8f 70       	andi	r24, 0x0F	; 15
    1a68:	08 26       	eor	r0, r24
    1a6a:	86 95       	lsr	r24
    1a6c:	98 27       	eor	r25, r24
    1a6e:	89 27       	eor	r24, r25
    1a70:	88 0f       	add	r24, r24
    1a72:	88 0f       	add	r24, r24
    1a74:	88 0f       	add	r24, r24
    1a76:	80 25       	eor	r24, r0
    1a78:	21 50       	subi	r18, 0x01	; 1

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    1a7a:	61 f7       	brne	.-40     	; 0x1a54 <message_crc+0x8>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    1a7c:	08 95       	ret

00001a7e <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    1a7e:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    1a80:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    1a82:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    1a84:	20 91 77 01 	lds	r18, 0x0177
    or tmpreg1, ddrreg
    1a88:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    1a8a:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    1a8c:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1a8e:	30 91 77 01 	lds	r19, 0x0177
    1a92:	20 30       	cpi	r18, 0x00	; 0
    1a94:	29 f0       	breq	.+10     	; 0x1aa0 <message_send+0x22>
    1a96:	00 00       	nop
    1a98:	25 b1       	in	r18, 0x05	; 5
    1a9a:	23 2b       	or	r18, r19
    1a9c:	25 b9       	out	0x05, r18	; 5
    1a9e:	04 c0       	rjmp	.+8      	; 0x1aa8 <message_send+0x2a>
    1aa0:	00 00       	nop
    1aa2:	00 00       	nop
    1aa4:	00 00       	nop
    1aa6:	00 c0       	rjmp	.+0      	; 0x1aa8 <message_send+0x2a>
    1aa8:	00 00       	nop
    1aaa:	00 00       	nop
    1aac:	00 00       	nop
    1aae:	30 95       	com	r19
    1ab0:	25 b1       	in	r18, 0x05	; 5
    1ab2:	23 23       	and	r18, r19
    1ab4:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    1ab6:	2e ea       	ldi	r18, 0xAE	; 174
    1ab8:	2a 95       	dec	r18
    1aba:	f1 f7       	brne	.-4      	; 0x1ab8 <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    1abc:	2b ee       	ldi	r18, 0xEB	; 235

00001abe <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    1abe:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    1ac0:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    1ac2:	0a c0       	rjmp	.+20     	; 0x1ad8 <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1ac4:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1ac6:	30 91 77 01 	lds	r19, 0x0177
    com tmpreg2
    1aca:	30 95       	com	r19
    in tmpreg1, IR_PORT
    1acc:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    1ace:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1ad0:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1ad2:	0f be       	out	0x3f, r0	; 63
    return 0
    1ad4:	80 e0       	ldi	r24, 0x00	; 0
    1ad6:	08 95       	ret

00001ad8 <nocollision>:
nocollision:
    nop
    1ad8:	00 00       	nop
    dec tmpreg1
    1ada:	2a 95       	dec	r18
    brne checkcollision
    1adc:	81 f7       	brne	.-32     	; 0x1abe <checkcollision>

    ldi tmpreg1, 0x01
    1ade:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1ae0:	30 91 77 01 	lds	r19, 0x0177
    1ae4:	20 30       	cpi	r18, 0x00	; 0
    1ae6:	29 f0       	breq	.+10     	; 0x1af2 <nocollision+0x1a>
    1ae8:	00 00       	nop
    1aea:	25 b1       	in	r18, 0x05	; 5
    1aec:	23 2b       	or	r18, r19
    1aee:	25 b9       	out	0x05, r18	; 5
    1af0:	04 c0       	rjmp	.+8      	; 0x1afa <nocollision+0x22>
    1af2:	00 00       	nop
    1af4:	00 00       	nop
    1af6:	00 00       	nop
    1af8:	00 c0       	rjmp	.+0      	; 0x1afa <nocollision+0x22>
    1afa:	00 00       	nop
    1afc:	00 00       	nop
    1afe:	00 00       	nop
    1b00:	30 95       	com	r19
    1b02:	25 b1       	in	r18, 0x05	; 5
    1b04:	23 23       	and	r18, r19
    1b06:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    1b08:	00 00       	nop
    1b0a:	24 e5       	ldi	r18, 0x54	; 84
    1b0c:	2a 95       	dec	r18
    1b0e:	f1 f7       	brne	.-4      	; 0x1b0c <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    1b10:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    1b12:	8c e0       	ldi	r24, 0x0C	; 12

00001b14 <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    1b14:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    1b16:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    1b18:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    1b1a:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    1b1c:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    1b1e:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    1b20:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    1b22:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    1b24:	50 e0       	ldi	r21, 0x00	; 0

00001b26 <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    1b26:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    1b28:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    1b2a:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    1b2c:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    1b2e:	30 91 77 01 	lds	r19, 0x0177
    1b32:	20 30       	cpi	r18, 0x00	; 0
    1b34:	29 f0       	breq	.+10     	; 0x1b40 <sendbit+0x1a>
    1b36:	00 00       	nop
    1b38:	25 b1       	in	r18, 0x05	; 5
    1b3a:	23 2b       	or	r18, r19
    1b3c:	25 b9       	out	0x05, r18	; 5
    1b3e:	04 c0       	rjmp	.+8      	; 0x1b48 <sendbit+0x22>
    1b40:	00 00       	nop
    1b42:	00 00       	nop
    1b44:	00 00       	nop
    1b46:	00 c0       	rjmp	.+0      	; 0x1b48 <sendbit+0x22>
    1b48:	00 00       	nop
    1b4a:	00 00       	nop
    1b4c:	00 00       	nop
    1b4e:	30 95       	com	r19
    1b50:	25 b1       	in	r18, 0x05	; 5
    1b52:	23 23       	and	r18, r19
    1b54:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    1b56:	00 00       	nop
    1b58:	21 e5       	ldi	r18, 0x51	; 81
    1b5a:	2a 95       	dec	r18
    1b5c:	f1 f7       	brne	.-4      	; 0x1b5a <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    1b5e:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    1b60:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    1b62:	9a 95       	dec	r25
    brne sendbit
    1b64:	01 f7       	brne	.-64     	; 0x1b26 <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    1b66:	8a 95       	dec	r24
    brne sendbyte
    1b68:	a9 f6       	brne	.-86     	; 0x1b14 <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    1b6a:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    1b6c:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    1b6e:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1b70:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1b72:	30 91 77 01 	lds	r19, 0x0177
    com tmpreg2
    1b76:	30 95       	com	r19
    in tmpreg1, IR_PORT
    1b78:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    1b7a:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1b7c:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1b7e:	0f be       	out	0x3f, r0	; 63
    return 1
    1b80:	81 e0       	ldi	r24, 0x01	; 1
    1b82:	08 95       	ret

00001b84 <main>:
}


int main()
{
    kilo_init();
    1b84:	0e 94 56 04 	call	0x8ac	; 0x8ac <kilo_init>
    kilo_message_rx = message_rx;
    1b88:	82 ec       	ldi	r24, 0xC2	; 194
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	90 93 1c 01 	sts	0x011C, r25
    1b90:	80 93 1b 01 	sts	0x011B, r24
    kilo_message_tx = message_tx;
    1b94:	8b ea       	ldi	r24, 0xAB	; 171
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	90 93 1a 01 	sts	0x011A, r25
    1b9c:	80 93 19 01 	sts	0x0119, r24
    kilo_start(setup, loop);
    1ba0:	6b e5       	ldi	r22, 0x5B	; 91
    1ba2:	73 e0       	ldi	r23, 0x03	; 3
    1ba4:	8e e6       	ldi	r24, 0x6E	; 110
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	0e 94 4f 05 	call	0xa9e	; 0xa9e <kilo_start>

    return 0;
}
    1bac:	80 e0       	ldi	r24, 0x00	; 0
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	08 95       	ret

00001bb2 <__divmodhi4>:
    1bb2:	97 fb       	bst	r25, 7
    1bb4:	07 2e       	mov	r0, r23
    1bb6:	16 f4       	brtc	.+4      	; 0x1bbc <__divmodhi4+0xa>
    1bb8:	00 94       	com	r0
    1bba:	07 d0       	rcall	.+14     	; 0x1bca <__divmodhi4_neg1>
    1bbc:	77 fd       	sbrc	r23, 7
    1bbe:	09 d0       	rcall	.+18     	; 0x1bd2 <__divmodhi4_neg2>
    1bc0:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <__udivmodhi4>
    1bc4:	07 fc       	sbrc	r0, 7
    1bc6:	05 d0       	rcall	.+10     	; 0x1bd2 <__divmodhi4_neg2>
    1bc8:	3e f4       	brtc	.+14     	; 0x1bd8 <__divmodhi4_exit>

00001bca <__divmodhi4_neg1>:
    1bca:	90 95       	com	r25
    1bcc:	81 95       	neg	r24
    1bce:	9f 4f       	sbci	r25, 0xFF	; 255
    1bd0:	08 95       	ret

00001bd2 <__divmodhi4_neg2>:
    1bd2:	70 95       	com	r23
    1bd4:	61 95       	neg	r22
    1bd6:	7f 4f       	sbci	r23, 0xFF	; 255

00001bd8 <__divmodhi4_exit>:
    1bd8:	08 95       	ret

00001bda <__tablejump2__>:
    1bda:	ee 0f       	add	r30, r30
    1bdc:	ff 1f       	adc	r31, r31

00001bde <__tablejump__>:
    1bde:	05 90       	lpm	r0, Z+
    1be0:	f4 91       	lpm	r31, Z
    1be2:	e0 2d       	mov	r30, r0
    1be4:	09 94       	ijmp

00001be6 <__umulhisi3>:
    1be6:	a2 9f       	mul	r26, r18
    1be8:	b0 01       	movw	r22, r0
    1bea:	b3 9f       	mul	r27, r19
    1bec:	c0 01       	movw	r24, r0
    1bee:	a3 9f       	mul	r26, r19
    1bf0:	70 0d       	add	r23, r0
    1bf2:	81 1d       	adc	r24, r1
    1bf4:	11 24       	eor	r1, r1
    1bf6:	91 1d       	adc	r25, r1
    1bf8:	b2 9f       	mul	r27, r18
    1bfa:	70 0d       	add	r23, r0
    1bfc:	81 1d       	adc	r24, r1
    1bfe:	11 24       	eor	r1, r1
    1c00:	91 1d       	adc	r25, r1
    1c02:	08 95       	ret

00001c04 <__udivmodhi4>:
    1c04:	aa 1b       	sub	r26, r26
    1c06:	bb 1b       	sub	r27, r27
    1c08:	51 e1       	ldi	r21, 0x11	; 17
    1c0a:	07 c0       	rjmp	.+14     	; 0x1c1a <__udivmodhi4_ep>

00001c0c <__udivmodhi4_loop>:
    1c0c:	aa 1f       	adc	r26, r26
    1c0e:	bb 1f       	adc	r27, r27
    1c10:	a6 17       	cp	r26, r22
    1c12:	b7 07       	cpc	r27, r23
    1c14:	10 f0       	brcs	.+4      	; 0x1c1a <__udivmodhi4_ep>
    1c16:	a6 1b       	sub	r26, r22
    1c18:	b7 0b       	sbc	r27, r23

00001c1a <__udivmodhi4_ep>:
    1c1a:	88 1f       	adc	r24, r24
    1c1c:	99 1f       	adc	r25, r25
    1c1e:	5a 95       	dec	r21
    1c20:	a9 f7       	brne	.-22     	; 0x1c0c <__udivmodhi4_loop>
    1c22:	80 95       	com	r24
    1c24:	90 95       	com	r25
    1c26:	bc 01       	movw	r22, r24
    1c28:	cd 01       	movw	r24, r26
    1c2a:	08 95       	ret

00001c2c <__subsf3>:
    1c2c:	50 58       	subi	r21, 0x80	; 128

00001c2e <__addsf3>:
    1c2e:	bb 27       	eor	r27, r27
    1c30:	aa 27       	eor	r26, r26
    1c32:	0e d0       	rcall	.+28     	; 0x1c50 <__addsf3x>
    1c34:	4d c1       	rjmp	.+666    	; 0x1ed0 <__fp_round>
    1c36:	3e d1       	rcall	.+636    	; 0x1eb4 <__fp_pscA>
    1c38:	30 f0       	brcs	.+12     	; 0x1c46 <__addsf3+0x18>
    1c3a:	43 d1       	rcall	.+646    	; 0x1ec2 <__fp_pscB>
    1c3c:	20 f0       	brcs	.+8      	; 0x1c46 <__addsf3+0x18>
    1c3e:	31 f4       	brne	.+12     	; 0x1c4c <__addsf3+0x1e>
    1c40:	9f 3f       	cpi	r25, 0xFF	; 255
    1c42:	11 f4       	brne	.+4      	; 0x1c48 <__addsf3+0x1a>
    1c44:	1e f4       	brtc	.+6      	; 0x1c4c <__addsf3+0x1e>
    1c46:	33 c1       	rjmp	.+614    	; 0x1eae <__fp_nan>
    1c48:	0e f4       	brtc	.+2      	; 0x1c4c <__addsf3+0x1e>
    1c4a:	e0 95       	com	r30
    1c4c:	e7 fb       	bst	r30, 7
    1c4e:	29 c1       	rjmp	.+594    	; 0x1ea2 <__fp_inf>

00001c50 <__addsf3x>:
    1c50:	e9 2f       	mov	r30, r25
    1c52:	4f d1       	rcall	.+670    	; 0x1ef2 <__fp_split3>
    1c54:	80 f3       	brcs	.-32     	; 0x1c36 <__addsf3+0x8>
    1c56:	ba 17       	cp	r27, r26
    1c58:	62 07       	cpc	r22, r18
    1c5a:	73 07       	cpc	r23, r19
    1c5c:	84 07       	cpc	r24, r20
    1c5e:	95 07       	cpc	r25, r21
    1c60:	18 f0       	brcs	.+6      	; 0x1c68 <__addsf3x+0x18>
    1c62:	71 f4       	brne	.+28     	; 0x1c80 <__addsf3x+0x30>
    1c64:	9e f5       	brtc	.+102    	; 0x1ccc <__addsf3x+0x7c>
    1c66:	67 c1       	rjmp	.+718    	; 0x1f36 <__fp_zero>
    1c68:	0e f4       	brtc	.+2      	; 0x1c6c <__addsf3x+0x1c>
    1c6a:	e0 95       	com	r30
    1c6c:	0b 2e       	mov	r0, r27
    1c6e:	ba 2f       	mov	r27, r26
    1c70:	a0 2d       	mov	r26, r0
    1c72:	0b 01       	movw	r0, r22
    1c74:	b9 01       	movw	r22, r18
    1c76:	90 01       	movw	r18, r0
    1c78:	0c 01       	movw	r0, r24
    1c7a:	ca 01       	movw	r24, r20
    1c7c:	a0 01       	movw	r20, r0
    1c7e:	11 24       	eor	r1, r1
    1c80:	ff 27       	eor	r31, r31
    1c82:	59 1b       	sub	r21, r25
    1c84:	99 f0       	breq	.+38     	; 0x1cac <__addsf3x+0x5c>
    1c86:	59 3f       	cpi	r21, 0xF9	; 249
    1c88:	50 f4       	brcc	.+20     	; 0x1c9e <__addsf3x+0x4e>
    1c8a:	50 3e       	cpi	r21, 0xE0	; 224
    1c8c:	68 f1       	brcs	.+90     	; 0x1ce8 <__addsf3x+0x98>
    1c8e:	1a 16       	cp	r1, r26
    1c90:	f0 40       	sbci	r31, 0x00	; 0
    1c92:	a2 2f       	mov	r26, r18
    1c94:	23 2f       	mov	r18, r19
    1c96:	34 2f       	mov	r19, r20
    1c98:	44 27       	eor	r20, r20
    1c9a:	58 5f       	subi	r21, 0xF8	; 248
    1c9c:	f3 cf       	rjmp	.-26     	; 0x1c84 <__addsf3x+0x34>
    1c9e:	46 95       	lsr	r20
    1ca0:	37 95       	ror	r19
    1ca2:	27 95       	ror	r18
    1ca4:	a7 95       	ror	r26
    1ca6:	f0 40       	sbci	r31, 0x00	; 0
    1ca8:	53 95       	inc	r21
    1caa:	c9 f7       	brne	.-14     	; 0x1c9e <__addsf3x+0x4e>
    1cac:	7e f4       	brtc	.+30     	; 0x1ccc <__addsf3x+0x7c>
    1cae:	1f 16       	cp	r1, r31
    1cb0:	ba 0b       	sbc	r27, r26
    1cb2:	62 0b       	sbc	r22, r18
    1cb4:	73 0b       	sbc	r23, r19
    1cb6:	84 0b       	sbc	r24, r20
    1cb8:	ba f0       	brmi	.+46     	; 0x1ce8 <__addsf3x+0x98>
    1cba:	91 50       	subi	r25, 0x01	; 1
    1cbc:	a1 f0       	breq	.+40     	; 0x1ce6 <__addsf3x+0x96>
    1cbe:	ff 0f       	add	r31, r31
    1cc0:	bb 1f       	adc	r27, r27
    1cc2:	66 1f       	adc	r22, r22
    1cc4:	77 1f       	adc	r23, r23
    1cc6:	88 1f       	adc	r24, r24
    1cc8:	c2 f7       	brpl	.-16     	; 0x1cba <__addsf3x+0x6a>
    1cca:	0e c0       	rjmp	.+28     	; 0x1ce8 <__addsf3x+0x98>
    1ccc:	ba 0f       	add	r27, r26
    1cce:	62 1f       	adc	r22, r18
    1cd0:	73 1f       	adc	r23, r19
    1cd2:	84 1f       	adc	r24, r20
    1cd4:	48 f4       	brcc	.+18     	; 0x1ce8 <__addsf3x+0x98>
    1cd6:	87 95       	ror	r24
    1cd8:	77 95       	ror	r23
    1cda:	67 95       	ror	r22
    1cdc:	b7 95       	ror	r27
    1cde:	f7 95       	ror	r31
    1ce0:	9e 3f       	cpi	r25, 0xFE	; 254
    1ce2:	08 f0       	brcs	.+2      	; 0x1ce6 <__addsf3x+0x96>
    1ce4:	b3 cf       	rjmp	.-154    	; 0x1c4c <__addsf3+0x1e>
    1ce6:	93 95       	inc	r25
    1ce8:	88 0f       	add	r24, r24
    1cea:	08 f0       	brcs	.+2      	; 0x1cee <__addsf3x+0x9e>
    1cec:	99 27       	eor	r25, r25
    1cee:	ee 0f       	add	r30, r30
    1cf0:	97 95       	ror	r25
    1cf2:	87 95       	ror	r24
    1cf4:	08 95       	ret

00001cf6 <__divsf3>:
    1cf6:	0c d0       	rcall	.+24     	; 0x1d10 <__divsf3x>
    1cf8:	eb c0       	rjmp	.+470    	; 0x1ed0 <__fp_round>
    1cfa:	e3 d0       	rcall	.+454    	; 0x1ec2 <__fp_pscB>
    1cfc:	40 f0       	brcs	.+16     	; 0x1d0e <__divsf3+0x18>
    1cfe:	da d0       	rcall	.+436    	; 0x1eb4 <__fp_pscA>
    1d00:	30 f0       	brcs	.+12     	; 0x1d0e <__divsf3+0x18>
    1d02:	21 f4       	brne	.+8      	; 0x1d0c <__divsf3+0x16>
    1d04:	5f 3f       	cpi	r21, 0xFF	; 255
    1d06:	19 f0       	breq	.+6      	; 0x1d0e <__divsf3+0x18>
    1d08:	cc c0       	rjmp	.+408    	; 0x1ea2 <__fp_inf>
    1d0a:	51 11       	cpse	r21, r1
    1d0c:	15 c1       	rjmp	.+554    	; 0x1f38 <__fp_szero>
    1d0e:	cf c0       	rjmp	.+414    	; 0x1eae <__fp_nan>

00001d10 <__divsf3x>:
    1d10:	f0 d0       	rcall	.+480    	; 0x1ef2 <__fp_split3>
    1d12:	98 f3       	brcs	.-26     	; 0x1cfa <__divsf3+0x4>

00001d14 <__divsf3_pse>:
    1d14:	99 23       	and	r25, r25
    1d16:	c9 f3       	breq	.-14     	; 0x1d0a <__divsf3+0x14>
    1d18:	55 23       	and	r21, r21
    1d1a:	b1 f3       	breq	.-20     	; 0x1d08 <__divsf3+0x12>
    1d1c:	95 1b       	sub	r25, r21
    1d1e:	55 0b       	sbc	r21, r21
    1d20:	bb 27       	eor	r27, r27
    1d22:	aa 27       	eor	r26, r26
    1d24:	62 17       	cp	r22, r18
    1d26:	73 07       	cpc	r23, r19
    1d28:	84 07       	cpc	r24, r20
    1d2a:	38 f0       	brcs	.+14     	; 0x1d3a <__divsf3_pse+0x26>
    1d2c:	9f 5f       	subi	r25, 0xFF	; 255
    1d2e:	5f 4f       	sbci	r21, 0xFF	; 255
    1d30:	22 0f       	add	r18, r18
    1d32:	33 1f       	adc	r19, r19
    1d34:	44 1f       	adc	r20, r20
    1d36:	aa 1f       	adc	r26, r26
    1d38:	a9 f3       	breq	.-22     	; 0x1d24 <__divsf3_pse+0x10>
    1d3a:	33 d0       	rcall	.+102    	; 0x1da2 <__divsf3_pse+0x8e>
    1d3c:	0e 2e       	mov	r0, r30
    1d3e:	3a f0       	brmi	.+14     	; 0x1d4e <__divsf3_pse+0x3a>
    1d40:	e0 e8       	ldi	r30, 0x80	; 128
    1d42:	30 d0       	rcall	.+96     	; 0x1da4 <__divsf3_pse+0x90>
    1d44:	91 50       	subi	r25, 0x01	; 1
    1d46:	50 40       	sbci	r21, 0x00	; 0
    1d48:	e6 95       	lsr	r30
    1d4a:	00 1c       	adc	r0, r0
    1d4c:	ca f7       	brpl	.-14     	; 0x1d40 <__divsf3_pse+0x2c>
    1d4e:	29 d0       	rcall	.+82     	; 0x1da2 <__divsf3_pse+0x8e>
    1d50:	fe 2f       	mov	r31, r30
    1d52:	27 d0       	rcall	.+78     	; 0x1da2 <__divsf3_pse+0x8e>
    1d54:	66 0f       	add	r22, r22
    1d56:	77 1f       	adc	r23, r23
    1d58:	88 1f       	adc	r24, r24
    1d5a:	bb 1f       	adc	r27, r27
    1d5c:	26 17       	cp	r18, r22
    1d5e:	37 07       	cpc	r19, r23
    1d60:	48 07       	cpc	r20, r24
    1d62:	ab 07       	cpc	r26, r27
    1d64:	b0 e8       	ldi	r27, 0x80	; 128
    1d66:	09 f0       	breq	.+2      	; 0x1d6a <__divsf3_pse+0x56>
    1d68:	bb 0b       	sbc	r27, r27
    1d6a:	80 2d       	mov	r24, r0
    1d6c:	bf 01       	movw	r22, r30
    1d6e:	ff 27       	eor	r31, r31
    1d70:	93 58       	subi	r25, 0x83	; 131
    1d72:	5f 4f       	sbci	r21, 0xFF	; 255
    1d74:	2a f0       	brmi	.+10     	; 0x1d80 <__divsf3_pse+0x6c>
    1d76:	9e 3f       	cpi	r25, 0xFE	; 254
    1d78:	51 05       	cpc	r21, r1
    1d7a:	68 f0       	brcs	.+26     	; 0x1d96 <__divsf3_pse+0x82>
    1d7c:	92 c0       	rjmp	.+292    	; 0x1ea2 <__fp_inf>
    1d7e:	dc c0       	rjmp	.+440    	; 0x1f38 <__fp_szero>
    1d80:	5f 3f       	cpi	r21, 0xFF	; 255
    1d82:	ec f3       	brlt	.-6      	; 0x1d7e <__divsf3_pse+0x6a>
    1d84:	98 3e       	cpi	r25, 0xE8	; 232
    1d86:	dc f3       	brlt	.-10     	; 0x1d7e <__divsf3_pse+0x6a>
    1d88:	86 95       	lsr	r24
    1d8a:	77 95       	ror	r23
    1d8c:	67 95       	ror	r22
    1d8e:	b7 95       	ror	r27
    1d90:	f7 95       	ror	r31
    1d92:	9f 5f       	subi	r25, 0xFF	; 255
    1d94:	c9 f7       	brne	.-14     	; 0x1d88 <__divsf3_pse+0x74>
    1d96:	88 0f       	add	r24, r24
    1d98:	91 1d       	adc	r25, r1
    1d9a:	96 95       	lsr	r25
    1d9c:	87 95       	ror	r24
    1d9e:	97 f9       	bld	r25, 7
    1da0:	08 95       	ret
    1da2:	e1 e0       	ldi	r30, 0x01	; 1
    1da4:	66 0f       	add	r22, r22
    1da6:	77 1f       	adc	r23, r23
    1da8:	88 1f       	adc	r24, r24
    1daa:	bb 1f       	adc	r27, r27
    1dac:	62 17       	cp	r22, r18
    1dae:	73 07       	cpc	r23, r19
    1db0:	84 07       	cpc	r24, r20
    1db2:	ba 07       	cpc	r27, r26
    1db4:	20 f0       	brcs	.+8      	; 0x1dbe <__divsf3_pse+0xaa>
    1db6:	62 1b       	sub	r22, r18
    1db8:	73 0b       	sbc	r23, r19
    1dba:	84 0b       	sbc	r24, r20
    1dbc:	ba 0b       	sbc	r27, r26
    1dbe:	ee 1f       	adc	r30, r30
    1dc0:	88 f7       	brcc	.-30     	; 0x1da4 <__divsf3_pse+0x90>
    1dc2:	e0 95       	com	r30
    1dc4:	08 95       	ret

00001dc6 <__fixsfsi>:
    1dc6:	04 d0       	rcall	.+8      	; 0x1dd0 <__fixunssfsi>
    1dc8:	68 94       	set
    1dca:	b1 11       	cpse	r27, r1
    1dcc:	b5 c0       	rjmp	.+362    	; 0x1f38 <__fp_szero>
    1dce:	08 95       	ret

00001dd0 <__fixunssfsi>:
    1dd0:	98 d0       	rcall	.+304    	; 0x1f02 <__fp_splitA>
    1dd2:	88 f0       	brcs	.+34     	; 0x1df6 <__fixunssfsi+0x26>
    1dd4:	9f 57       	subi	r25, 0x7F	; 127
    1dd6:	90 f0       	brcs	.+36     	; 0x1dfc <__fixunssfsi+0x2c>
    1dd8:	b9 2f       	mov	r27, r25
    1dda:	99 27       	eor	r25, r25
    1ddc:	b7 51       	subi	r27, 0x17	; 23
    1dde:	a0 f0       	brcs	.+40     	; 0x1e08 <__fixunssfsi+0x38>
    1de0:	d1 f0       	breq	.+52     	; 0x1e16 <__fixunssfsi+0x46>
    1de2:	66 0f       	add	r22, r22
    1de4:	77 1f       	adc	r23, r23
    1de6:	88 1f       	adc	r24, r24
    1de8:	99 1f       	adc	r25, r25
    1dea:	1a f0       	brmi	.+6      	; 0x1df2 <__fixunssfsi+0x22>
    1dec:	ba 95       	dec	r27
    1dee:	c9 f7       	brne	.-14     	; 0x1de2 <__fixunssfsi+0x12>
    1df0:	12 c0       	rjmp	.+36     	; 0x1e16 <__fixunssfsi+0x46>
    1df2:	b1 30       	cpi	r27, 0x01	; 1
    1df4:	81 f0       	breq	.+32     	; 0x1e16 <__fixunssfsi+0x46>
    1df6:	9f d0       	rcall	.+318    	; 0x1f36 <__fp_zero>
    1df8:	b1 e0       	ldi	r27, 0x01	; 1
    1dfa:	08 95       	ret
    1dfc:	9c c0       	rjmp	.+312    	; 0x1f36 <__fp_zero>
    1dfe:	67 2f       	mov	r22, r23
    1e00:	78 2f       	mov	r23, r24
    1e02:	88 27       	eor	r24, r24
    1e04:	b8 5f       	subi	r27, 0xF8	; 248
    1e06:	39 f0       	breq	.+14     	; 0x1e16 <__fixunssfsi+0x46>
    1e08:	b9 3f       	cpi	r27, 0xF9	; 249
    1e0a:	cc f3       	brlt	.-14     	; 0x1dfe <__fixunssfsi+0x2e>
    1e0c:	86 95       	lsr	r24
    1e0e:	77 95       	ror	r23
    1e10:	67 95       	ror	r22
    1e12:	b3 95       	inc	r27
    1e14:	d9 f7       	brne	.-10     	; 0x1e0c <__fixunssfsi+0x3c>
    1e16:	3e f4       	brtc	.+14     	; 0x1e26 <__fixunssfsi+0x56>
    1e18:	90 95       	com	r25
    1e1a:	80 95       	com	r24
    1e1c:	70 95       	com	r23
    1e1e:	61 95       	neg	r22
    1e20:	7f 4f       	sbci	r23, 0xFF	; 255
    1e22:	8f 4f       	sbci	r24, 0xFF	; 255
    1e24:	9f 4f       	sbci	r25, 0xFF	; 255
    1e26:	08 95       	ret

00001e28 <__floatunsisf>:
    1e28:	e8 94       	clt
    1e2a:	09 c0       	rjmp	.+18     	; 0x1e3e <__floatsisf+0x12>

00001e2c <__floatsisf>:
    1e2c:	97 fb       	bst	r25, 7
    1e2e:	3e f4       	brtc	.+14     	; 0x1e3e <__floatsisf+0x12>
    1e30:	90 95       	com	r25
    1e32:	80 95       	com	r24
    1e34:	70 95       	com	r23
    1e36:	61 95       	neg	r22
    1e38:	7f 4f       	sbci	r23, 0xFF	; 255
    1e3a:	8f 4f       	sbci	r24, 0xFF	; 255
    1e3c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e3e:	99 23       	and	r25, r25
    1e40:	a9 f0       	breq	.+42     	; 0x1e6c <__floatsisf+0x40>
    1e42:	f9 2f       	mov	r31, r25
    1e44:	96 e9       	ldi	r25, 0x96	; 150
    1e46:	bb 27       	eor	r27, r27
    1e48:	93 95       	inc	r25
    1e4a:	f6 95       	lsr	r31
    1e4c:	87 95       	ror	r24
    1e4e:	77 95       	ror	r23
    1e50:	67 95       	ror	r22
    1e52:	b7 95       	ror	r27
    1e54:	f1 11       	cpse	r31, r1
    1e56:	f8 cf       	rjmp	.-16     	; 0x1e48 <__floatsisf+0x1c>
    1e58:	fa f4       	brpl	.+62     	; 0x1e98 <__floatsisf+0x6c>
    1e5a:	bb 0f       	add	r27, r27
    1e5c:	11 f4       	brne	.+4      	; 0x1e62 <__floatsisf+0x36>
    1e5e:	60 ff       	sbrs	r22, 0
    1e60:	1b c0       	rjmp	.+54     	; 0x1e98 <__floatsisf+0x6c>
    1e62:	6f 5f       	subi	r22, 0xFF	; 255
    1e64:	7f 4f       	sbci	r23, 0xFF	; 255
    1e66:	8f 4f       	sbci	r24, 0xFF	; 255
    1e68:	9f 4f       	sbci	r25, 0xFF	; 255
    1e6a:	16 c0       	rjmp	.+44     	; 0x1e98 <__floatsisf+0x6c>
    1e6c:	88 23       	and	r24, r24
    1e6e:	11 f0       	breq	.+4      	; 0x1e74 <__floatsisf+0x48>
    1e70:	96 e9       	ldi	r25, 0x96	; 150
    1e72:	11 c0       	rjmp	.+34     	; 0x1e96 <__floatsisf+0x6a>
    1e74:	77 23       	and	r23, r23
    1e76:	21 f0       	breq	.+8      	; 0x1e80 <__floatsisf+0x54>
    1e78:	9e e8       	ldi	r25, 0x8E	; 142
    1e7a:	87 2f       	mov	r24, r23
    1e7c:	76 2f       	mov	r23, r22
    1e7e:	05 c0       	rjmp	.+10     	; 0x1e8a <__floatsisf+0x5e>
    1e80:	66 23       	and	r22, r22
    1e82:	71 f0       	breq	.+28     	; 0x1ea0 <__floatsisf+0x74>
    1e84:	96 e8       	ldi	r25, 0x86	; 134
    1e86:	86 2f       	mov	r24, r22
    1e88:	70 e0       	ldi	r23, 0x00	; 0
    1e8a:	60 e0       	ldi	r22, 0x00	; 0
    1e8c:	2a f0       	brmi	.+10     	; 0x1e98 <__floatsisf+0x6c>
    1e8e:	9a 95       	dec	r25
    1e90:	66 0f       	add	r22, r22
    1e92:	77 1f       	adc	r23, r23
    1e94:	88 1f       	adc	r24, r24
    1e96:	da f7       	brpl	.-10     	; 0x1e8e <__floatsisf+0x62>
    1e98:	88 0f       	add	r24, r24
    1e9a:	96 95       	lsr	r25
    1e9c:	87 95       	ror	r24
    1e9e:	97 f9       	bld	r25, 7
    1ea0:	08 95       	ret

00001ea2 <__fp_inf>:
    1ea2:	97 f9       	bld	r25, 7
    1ea4:	9f 67       	ori	r25, 0x7F	; 127
    1ea6:	80 e8       	ldi	r24, 0x80	; 128
    1ea8:	70 e0       	ldi	r23, 0x00	; 0
    1eaa:	60 e0       	ldi	r22, 0x00	; 0
    1eac:	08 95       	ret

00001eae <__fp_nan>:
    1eae:	9f ef       	ldi	r25, 0xFF	; 255
    1eb0:	80 ec       	ldi	r24, 0xC0	; 192
    1eb2:	08 95       	ret

00001eb4 <__fp_pscA>:
    1eb4:	00 24       	eor	r0, r0
    1eb6:	0a 94       	dec	r0
    1eb8:	16 16       	cp	r1, r22
    1eba:	17 06       	cpc	r1, r23
    1ebc:	18 06       	cpc	r1, r24
    1ebe:	09 06       	cpc	r0, r25
    1ec0:	08 95       	ret

00001ec2 <__fp_pscB>:
    1ec2:	00 24       	eor	r0, r0
    1ec4:	0a 94       	dec	r0
    1ec6:	12 16       	cp	r1, r18
    1ec8:	13 06       	cpc	r1, r19
    1eca:	14 06       	cpc	r1, r20
    1ecc:	05 06       	cpc	r0, r21
    1ece:	08 95       	ret

00001ed0 <__fp_round>:
    1ed0:	09 2e       	mov	r0, r25
    1ed2:	03 94       	inc	r0
    1ed4:	00 0c       	add	r0, r0
    1ed6:	11 f4       	brne	.+4      	; 0x1edc <__fp_round+0xc>
    1ed8:	88 23       	and	r24, r24
    1eda:	52 f0       	brmi	.+20     	; 0x1ef0 <__fp_round+0x20>
    1edc:	bb 0f       	add	r27, r27
    1ede:	40 f4       	brcc	.+16     	; 0x1ef0 <__fp_round+0x20>
    1ee0:	bf 2b       	or	r27, r31
    1ee2:	11 f4       	brne	.+4      	; 0x1ee8 <__fp_round+0x18>
    1ee4:	60 ff       	sbrs	r22, 0
    1ee6:	04 c0       	rjmp	.+8      	; 0x1ef0 <__fp_round+0x20>
    1ee8:	6f 5f       	subi	r22, 0xFF	; 255
    1eea:	7f 4f       	sbci	r23, 0xFF	; 255
    1eec:	8f 4f       	sbci	r24, 0xFF	; 255
    1eee:	9f 4f       	sbci	r25, 0xFF	; 255
    1ef0:	08 95       	ret

00001ef2 <__fp_split3>:
    1ef2:	57 fd       	sbrc	r21, 7
    1ef4:	90 58       	subi	r25, 0x80	; 128
    1ef6:	44 0f       	add	r20, r20
    1ef8:	55 1f       	adc	r21, r21
    1efa:	59 f0       	breq	.+22     	; 0x1f12 <__fp_splitA+0x10>
    1efc:	5f 3f       	cpi	r21, 0xFF	; 255
    1efe:	71 f0       	breq	.+28     	; 0x1f1c <__fp_splitA+0x1a>
    1f00:	47 95       	ror	r20

00001f02 <__fp_splitA>:
    1f02:	88 0f       	add	r24, r24
    1f04:	97 fb       	bst	r25, 7
    1f06:	99 1f       	adc	r25, r25
    1f08:	61 f0       	breq	.+24     	; 0x1f22 <__fp_splitA+0x20>
    1f0a:	9f 3f       	cpi	r25, 0xFF	; 255
    1f0c:	79 f0       	breq	.+30     	; 0x1f2c <__fp_splitA+0x2a>
    1f0e:	87 95       	ror	r24
    1f10:	08 95       	ret
    1f12:	12 16       	cp	r1, r18
    1f14:	13 06       	cpc	r1, r19
    1f16:	14 06       	cpc	r1, r20
    1f18:	55 1f       	adc	r21, r21
    1f1a:	f2 cf       	rjmp	.-28     	; 0x1f00 <__fp_split3+0xe>
    1f1c:	46 95       	lsr	r20
    1f1e:	f1 df       	rcall	.-30     	; 0x1f02 <__fp_splitA>
    1f20:	08 c0       	rjmp	.+16     	; 0x1f32 <__fp_splitA+0x30>
    1f22:	16 16       	cp	r1, r22
    1f24:	17 06       	cpc	r1, r23
    1f26:	18 06       	cpc	r1, r24
    1f28:	99 1f       	adc	r25, r25
    1f2a:	f1 cf       	rjmp	.-30     	; 0x1f0e <__fp_splitA+0xc>
    1f2c:	86 95       	lsr	r24
    1f2e:	71 05       	cpc	r23, r1
    1f30:	61 05       	cpc	r22, r1
    1f32:	08 94       	sec
    1f34:	08 95       	ret

00001f36 <__fp_zero>:
    1f36:	e8 94       	clt

00001f38 <__fp_szero>:
    1f38:	bb 27       	eor	r27, r27
    1f3a:	66 27       	eor	r22, r22
    1f3c:	77 27       	eor	r23, r23
    1f3e:	cb 01       	movw	r24, r22
    1f40:	97 f9       	bld	r25, 7
    1f42:	08 95       	ret

00001f44 <__gesf2>:
    1f44:	66 d0       	rcall	.+204    	; 0x2012 <__fp_cmp>
    1f46:	08 f4       	brcc	.+2      	; 0x1f4a <__gesf2+0x6>
    1f48:	8f ef       	ldi	r24, 0xFF	; 255
    1f4a:	08 95       	ret

00001f4c <__mulsf3>:
    1f4c:	0b d0       	rcall	.+22     	; 0x1f64 <__mulsf3x>
    1f4e:	c0 cf       	rjmp	.-128    	; 0x1ed0 <__fp_round>
    1f50:	b1 df       	rcall	.-158    	; 0x1eb4 <__fp_pscA>
    1f52:	28 f0       	brcs	.+10     	; 0x1f5e <__mulsf3+0x12>
    1f54:	b6 df       	rcall	.-148    	; 0x1ec2 <__fp_pscB>
    1f56:	18 f0       	brcs	.+6      	; 0x1f5e <__mulsf3+0x12>
    1f58:	95 23       	and	r25, r21
    1f5a:	09 f0       	breq	.+2      	; 0x1f5e <__mulsf3+0x12>
    1f5c:	a2 cf       	rjmp	.-188    	; 0x1ea2 <__fp_inf>
    1f5e:	a7 cf       	rjmp	.-178    	; 0x1eae <__fp_nan>
    1f60:	11 24       	eor	r1, r1
    1f62:	ea cf       	rjmp	.-44     	; 0x1f38 <__fp_szero>

00001f64 <__mulsf3x>:
    1f64:	c6 df       	rcall	.-116    	; 0x1ef2 <__fp_split3>
    1f66:	a0 f3       	brcs	.-24     	; 0x1f50 <__mulsf3+0x4>

00001f68 <__mulsf3_pse>:
    1f68:	95 9f       	mul	r25, r21
    1f6a:	d1 f3       	breq	.-12     	; 0x1f60 <__mulsf3+0x14>
    1f6c:	95 0f       	add	r25, r21
    1f6e:	50 e0       	ldi	r21, 0x00	; 0
    1f70:	55 1f       	adc	r21, r21
    1f72:	62 9f       	mul	r22, r18
    1f74:	f0 01       	movw	r30, r0
    1f76:	72 9f       	mul	r23, r18
    1f78:	bb 27       	eor	r27, r27
    1f7a:	f0 0d       	add	r31, r0
    1f7c:	b1 1d       	adc	r27, r1
    1f7e:	63 9f       	mul	r22, r19
    1f80:	aa 27       	eor	r26, r26
    1f82:	f0 0d       	add	r31, r0
    1f84:	b1 1d       	adc	r27, r1
    1f86:	aa 1f       	adc	r26, r26
    1f88:	64 9f       	mul	r22, r20
    1f8a:	66 27       	eor	r22, r22
    1f8c:	b0 0d       	add	r27, r0
    1f8e:	a1 1d       	adc	r26, r1
    1f90:	66 1f       	adc	r22, r22
    1f92:	82 9f       	mul	r24, r18
    1f94:	22 27       	eor	r18, r18
    1f96:	b0 0d       	add	r27, r0
    1f98:	a1 1d       	adc	r26, r1
    1f9a:	62 1f       	adc	r22, r18
    1f9c:	73 9f       	mul	r23, r19
    1f9e:	b0 0d       	add	r27, r0
    1fa0:	a1 1d       	adc	r26, r1
    1fa2:	62 1f       	adc	r22, r18
    1fa4:	83 9f       	mul	r24, r19
    1fa6:	a0 0d       	add	r26, r0
    1fa8:	61 1d       	adc	r22, r1
    1faa:	22 1f       	adc	r18, r18
    1fac:	74 9f       	mul	r23, r20
    1fae:	33 27       	eor	r19, r19
    1fb0:	a0 0d       	add	r26, r0
    1fb2:	61 1d       	adc	r22, r1
    1fb4:	23 1f       	adc	r18, r19
    1fb6:	84 9f       	mul	r24, r20
    1fb8:	60 0d       	add	r22, r0
    1fba:	21 1d       	adc	r18, r1
    1fbc:	82 2f       	mov	r24, r18
    1fbe:	76 2f       	mov	r23, r22
    1fc0:	6a 2f       	mov	r22, r26
    1fc2:	11 24       	eor	r1, r1
    1fc4:	9f 57       	subi	r25, 0x7F	; 127
    1fc6:	50 40       	sbci	r21, 0x00	; 0
    1fc8:	8a f0       	brmi	.+34     	; 0x1fec <__mulsf3_pse+0x84>
    1fca:	e1 f0       	breq	.+56     	; 0x2004 <__mulsf3_pse+0x9c>
    1fcc:	88 23       	and	r24, r24
    1fce:	4a f0       	brmi	.+18     	; 0x1fe2 <__mulsf3_pse+0x7a>
    1fd0:	ee 0f       	add	r30, r30
    1fd2:	ff 1f       	adc	r31, r31
    1fd4:	bb 1f       	adc	r27, r27
    1fd6:	66 1f       	adc	r22, r22
    1fd8:	77 1f       	adc	r23, r23
    1fda:	88 1f       	adc	r24, r24
    1fdc:	91 50       	subi	r25, 0x01	; 1
    1fde:	50 40       	sbci	r21, 0x00	; 0
    1fe0:	a9 f7       	brne	.-22     	; 0x1fcc <__mulsf3_pse+0x64>
    1fe2:	9e 3f       	cpi	r25, 0xFE	; 254
    1fe4:	51 05       	cpc	r21, r1
    1fe6:	70 f0       	brcs	.+28     	; 0x2004 <__mulsf3_pse+0x9c>
    1fe8:	5c cf       	rjmp	.-328    	; 0x1ea2 <__fp_inf>
    1fea:	a6 cf       	rjmp	.-180    	; 0x1f38 <__fp_szero>
    1fec:	5f 3f       	cpi	r21, 0xFF	; 255
    1fee:	ec f3       	brlt	.-6      	; 0x1fea <__mulsf3_pse+0x82>
    1ff0:	98 3e       	cpi	r25, 0xE8	; 232
    1ff2:	dc f3       	brlt	.-10     	; 0x1fea <__mulsf3_pse+0x82>
    1ff4:	86 95       	lsr	r24
    1ff6:	77 95       	ror	r23
    1ff8:	67 95       	ror	r22
    1ffa:	b7 95       	ror	r27
    1ffc:	f7 95       	ror	r31
    1ffe:	e7 95       	ror	r30
    2000:	9f 5f       	subi	r25, 0xFF	; 255
    2002:	c1 f7       	brne	.-16     	; 0x1ff4 <__mulsf3_pse+0x8c>
    2004:	fe 2b       	or	r31, r30
    2006:	88 0f       	add	r24, r24
    2008:	91 1d       	adc	r25, r1
    200a:	96 95       	lsr	r25
    200c:	87 95       	ror	r24
    200e:	97 f9       	bld	r25, 7
    2010:	08 95       	ret

00002012 <__fp_cmp>:
    2012:	99 0f       	add	r25, r25
    2014:	00 08       	sbc	r0, r0
    2016:	55 0f       	add	r21, r21
    2018:	aa 0b       	sbc	r26, r26
    201a:	e0 e8       	ldi	r30, 0x80	; 128
    201c:	fe ef       	ldi	r31, 0xFE	; 254
    201e:	16 16       	cp	r1, r22
    2020:	17 06       	cpc	r1, r23
    2022:	e8 07       	cpc	r30, r24
    2024:	f9 07       	cpc	r31, r25
    2026:	c0 f0       	brcs	.+48     	; 0x2058 <__fp_cmp+0x46>
    2028:	12 16       	cp	r1, r18
    202a:	13 06       	cpc	r1, r19
    202c:	e4 07       	cpc	r30, r20
    202e:	f5 07       	cpc	r31, r21
    2030:	98 f0       	brcs	.+38     	; 0x2058 <__fp_cmp+0x46>
    2032:	62 1b       	sub	r22, r18
    2034:	73 0b       	sbc	r23, r19
    2036:	84 0b       	sbc	r24, r20
    2038:	95 0b       	sbc	r25, r21
    203a:	39 f4       	brne	.+14     	; 0x204a <__fp_cmp+0x38>
    203c:	0a 26       	eor	r0, r26
    203e:	61 f0       	breq	.+24     	; 0x2058 <__fp_cmp+0x46>
    2040:	23 2b       	or	r18, r19
    2042:	24 2b       	or	r18, r20
    2044:	25 2b       	or	r18, r21
    2046:	21 f4       	brne	.+8      	; 0x2050 <__fp_cmp+0x3e>
    2048:	08 95       	ret
    204a:	0a 26       	eor	r0, r26
    204c:	09 f4       	brne	.+2      	; 0x2050 <__fp_cmp+0x3e>
    204e:	a1 40       	sbci	r26, 0x01	; 1
    2050:	a6 95       	lsr	r26
    2052:	8f ef       	ldi	r24, 0xFF	; 255
    2054:	81 1d       	adc	r24, r1
    2056:	81 1d       	adc	r24, r1
    2058:	08 95       	ret

0000205a <__eerd_byte_m328p>:
    205a:	f9 99       	sbic	0x1f, 1	; 31
    205c:	fe cf       	rjmp	.-4      	; 0x205a <__eerd_byte_m328p>
    205e:	92 bd       	out	0x22, r25	; 34
    2060:	81 bd       	out	0x21, r24	; 33
    2062:	f8 9a       	sbi	0x1f, 0	; 31
    2064:	99 27       	eor	r25, r25
    2066:	80 b5       	in	r24, 0x20	; 32
    2068:	08 95       	ret

0000206a <__eewr_byte_m328p>:
    206a:	26 2f       	mov	r18, r22

0000206c <__eewr_r18_m328p>:
    206c:	f9 99       	sbic	0x1f, 1	; 31
    206e:	fe cf       	rjmp	.-4      	; 0x206c <__eewr_r18_m328p>
    2070:	1f ba       	out	0x1f, r1	; 31
    2072:	92 bd       	out	0x22, r25	; 34
    2074:	81 bd       	out	0x21, r24	; 33
    2076:	20 bd       	out	0x20, r18	; 32
    2078:	0f b6       	in	r0, 0x3f	; 63
    207a:	f8 94       	cli
    207c:	fa 9a       	sbi	0x1f, 2	; 31
    207e:	f9 9a       	sbi	0x1f, 1	; 31
    2080:	0f be       	out	0x3f, r0	; 63
    2082:	01 96       	adiw	r24, 0x01	; 1
    2084:	08 95       	ret

00002086 <_exit>:
    2086:	f8 94       	cli

00002088 <__stop_program>:
    2088:	ff cf       	rjmp	.-2      	; 0x2088 <__stop_program>
